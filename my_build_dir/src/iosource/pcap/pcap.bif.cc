// This file was automatically generated by bifcl from /home/ubuntu/bro/src/iosource/pcap/pcap.bif (alternative mode).


#include "pcap.bif.h"

namespace BifConst { namespace Pcap {  bro_uint_t snaplen;  }  }
namespace BifConst { namespace Pcap {  bro_uint_t bufsize;  }  }

#line 25 "pcap.bif"
Val* BifFunc::Pcap::bro_precompile_pcap_filter(Frame* frame, val_list* BiF_ARGS)
	
#line 26 "pcap.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Pcap::precompile_pcap_filter() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	StringVal* s = (StringVal*) ((*BiF_ARGS)[1]->AsStringVal());

#line 26 "pcap.bif"

	if ( id->AsEnum() >= 100 )
		{
		// We use a vector as underlying data structure for fast
		// lookups and limit the ID space so that that doesn't grow too
		// large.
		builtin_error(fmt("PCAP filter ids must remain below 100 (is %" PRId64 ")", id->AsInt()));
		return new Val(false, TYPE_BOOL);
		}

	bool success = true;

	const iosource::Manager::PktSrcList& pkt_srcs(iosource_mgr->GetPktSrcs());

	for ( iosource::Manager::PktSrcList::const_iterator i = pkt_srcs.begin();
	      i != pkt_srcs.end(); i++ )
		{
		iosource::PktSrc* ps = *i;

		if ( ! ps->PrecompileFilter(id->ForceAsInt(),
							s->CheckString()) )
			success = false;
		}

	return new Val(success, TYPE_BOOL);
	} // end of BifFunc::Pcap::bro_precompile_pcap_filter

#line 51 "pcap.bif"

#line 71 "pcap.bif"
Val* BifFunc::Pcap::bro_install_pcap_filter(Frame* frame, val_list* BiF_ARGS)
	
#line 72 "pcap.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Pcap::install_pcap_filter() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 72 "pcap.bif"

	bool success = true;

	const iosource::Manager::PktSrcList& pkt_srcs(iosource_mgr->GetPktSrcs());

	for ( iosource::Manager::PktSrcList::const_iterator i = pkt_srcs.begin();
	      i != pkt_srcs.end(); i++ )
		{
		iosource::PktSrc* ps = *i;

		if ( ! ps->SetFilter(id->ForceAsInt()) )
			success = false;
		}

	return new Val(success, TYPE_BOOL);
	} // end of BifFunc::Pcap::bro_install_pcap_filter

#line 87 "pcap.bif"

#line 103 "pcap.bif"
Val* BifFunc::Pcap::bro_error(Frame* frame, val_list* BiF_ARGS)
	
#line 104 "pcap.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("Pcap::error() takes exactly 0 argument(s)");
		return 0;
		}

#line 104 "pcap.bif"

	const iosource::Manager::PktSrcList& pkt_srcs(iosource_mgr->GetPktSrcs());

	for ( iosource::Manager::PktSrcList::const_iterator i = pkt_srcs.begin();
	      i != pkt_srcs.end(); i++ )
		{
		iosource::PktSrc* ps = *i;

		const char* err = ps->ErrorMsg();
		if ( *err )
			return new StringVal(err);
		}

	return new StringVal("no error");
	} // end of BifFunc::Pcap::bro_error

#line 118 "pcap.bif"
