#line 2 "/home/ubuntu/bro/my_build_dir/src/scan.cc"

#line 4 "/home/ubuntu/bro/my_build_dir/src/scan.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer bro_create_buffer
#define yy_delete_buffer bro_delete_buffer
#define yy_flex_debug bro_flex_debug
#define yy_init_buffer bro_init_buffer
#define yy_flush_buffer bro_flush_buffer
#define yy_load_buffer_state bro_load_buffer_state
#define yy_switch_to_buffer bro_switch_to_buffer
#define yyin broin
#define yyleng broleng
#define yylex brolex
#define yylineno brolineno
#define yyout broout
#define yyrestart brorestart
#define yytext brotext
#define yywrap browrap
#define yyalloc broalloc
#define yyrealloc brorealloc
#define yyfree brofree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE brorestart(broin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t broleng;

extern FILE *broin, *broout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up brotext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up brotext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via brorestart()), so that the user can continue scanning by
	 * just pointing broin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when brotext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t broleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow browrap()'s to do buffer switches
 * instead of setting up a fresh broin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void brorestart (FILE *input_file  );
void bro_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE bro_create_buffer (FILE *file,int size  );
void bro_delete_buffer (YY_BUFFER_STATE b  );
void bro_flush_buffer (YY_BUFFER_STATE b  );
void bropush_buffer_state (YY_BUFFER_STATE new_buffer  );
void bropop_buffer_state (void );

static void broensure_buffer_stack (void );
static void bro_load_buffer_state (void );
static void bro_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER bro_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE bro_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE bro_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE bro_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *broalloc (yy_size_t  );
void *brorealloc (void *,yy_size_t  );
void brofree (void *  );

#define yy_new_buffer bro_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        broensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            bro_create_buffer(broin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        broensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            bro_create_buffer(broin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *broin = (FILE *) 0, *broout = (FILE *) 0;

typedef int yy_state_type;

extern int brolineno;

int brolineno = 1;

extern char *brotext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr brotext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up brotext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	broleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[759] =
    {   0,
        0,    0,    0,    0,    0,    0,  142,  140,    6,    7,
       12,  140,    5,   12,  140,   12,   12,  140,  123,  123,
       12,   12,   12,   12,  140,  122,  121,  120,   12,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
       12,  138,  139,  139,  139,  118,  119,    6,    0,   18,
        0,    0,  137,    0,    5,    5,    3,    5,   21,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   14,   15,   13,   16,  124,    0,    0,  124,    0,
      123,    0,    0,    0,    0,    0,    0,    0,   20,   17,

       19,   47,    0,    0,    0,    0,    0,    0,    0,    0,
      122,    0,  122,    0,    0,    0,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,   49,   50,  122,  122,  122,  122,
       58,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,   22,  138,    0,
      138,  138,  118,    0,    0,    0,    0,    0,    3,    1,
        2,    5,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  124,  136,  136,  136,  136,

      136,  136,  136,    0,    0,    0,    0,    0,  124,    0,
      130,    0,    0,    0,    0,  135,    0,    0,    0,    0,
        0,  108,    0,    0,    0,    0,    0,    0,    0,    0,
       23,   25,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,   43,  122,  122,
      122,   52,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,   67,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  138,    0,    0,  113,
       51,    0,    1,    2,    5,    0,    0,    0,    0,    0,
        0,    0,    0,   87,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  124,    0,  130,    0,    0,
        0,    0,  136,    0,  124,  136,  136,  136,  136,  136,
      136,  136,  124,  136,  130,  136,  136,  136,  136,    0,
        0,    0,    0,  129,  130,  131,    0,  132,    0,    0,
      101,    0,    0,    0,    0,    0,    0,    0,    0,  122,
        0,    0,    0,    0,    0,    8,   24,   26,  122,   28,
      122,   31,  122,  122,  122,  122,   37,   38,  122,  122,
      122,   42,  122,  122,   48,  122,   54,  122,  122,   57,
      122,  122,  122,   61,  122,  122,  122,  122,  122,  122,
      122,  122,  122,   72,   75,  122,  122,   78,  122,    0,

        0,    0,    0,    5,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  129,  130,  131,    0,  132,    0,  136,
      129,  130,  131,  136,  132,  136,    0,  125,  126,    0,
      129,  131,  133,  132,  134,    0,    0,  111,    0,    0,
        0,    0,    0,    0,  122,    0,    0,    0,    0,    0,
        0,    0,   27,   30,   32,  122,  122,  122,   39,  122,
      122,  122,  122,  122,   55,  122,  122,  122,  122,   62,
      122,   64,  122,  122,  122,  122,  122,   71,  122,   74,
       76,  122,   44,  116,    0,    0,    0,    5,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   92,    0,    0,    0,    0,  129,  131,  133,
      132,  134,    0,  136,  129,  131,  133,  132,  134,  127,
        0,  133,  134,  100,    0,  112,  109,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    9,  122,  122,
       35,   36,   40,  122,  122,   46,  122,   56,   59,   29,
      122,   63,   65,  122,   68,   69,   70,  122,   77,  117,
      114,    0,    5,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  133,  134,   10,  133,  134,    0,    0,  110,  103,

        0,    0,    0,    0,    0,    0,    0,    0,   33,   34,
      122,  122,  122,   60,  122,   73,  115,    5,    0,    0,
       81,    0,    0,   94,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   10,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  122,   45,
       53,   66,    4,   79,    0,    0,    0,    0,    0,    0,
       88,    0,   89,    0,    0,    0,    0,    0,    0,    0,
        0,   11,  128,  102,    0,    0,    0,  106,    0,    0,
      122,    4,    0,    0,    0,    0,    0,   95,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  122,    0,    0,   83,    0,    0,   96,   84,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       41,    0,   82,    0,   86,   91,    0,   98,    0,   90,
        0,    0,  104,    0,    0,    0,    0,    0,   99,   93,
        0,  107,    0,   80,   85,    0,  105,    0,    0,  105,
        0,    0,   97,    0,    0,  105,  105,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,    1,    8,
        8,    8,   10,    8,   11,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   16,   16,   17,    8,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   30,   30,   32,   33,   34,   30,   30,
       30,   35,   30,   36,   37,   30,   30,   30,   30,   30,
       38,   39,   40,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   30,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    8,   67,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[68] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        4,    4,    5,    6,    6,    6,    7,    1,    1,    1,
        1,    8,    9,    9,    9,    9,    9,    9,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    1,    1,   11,
       12,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,    1
    } ;

static yyconst flex_uint16_t yy_base[799] =
    {   0,
        0,    0,   65,   66,   67,   68, 2111, 2366, 2105, 2366,
       72,   67,   71, 2366,  114,   65,   69,   67,  176,  239,
     2085, 2082, 2078, 2089,   68,   75,   86,   90,   94, 2075,
       98,  121,  169,  187,  195,  252,  123,  130,  185,  256,
      203,  263,  278,  303,  305,  316,  324,  326,  337,  352,
     2014, 2030, 2366, 2366,  131,    0,   49, 2039,   98, 2366,
     1986,   80, 2366,  136,    0,  115,  108, 1985, 2366, 1993,
     1979, 1989,   99, 1978, 1986, 1975,   67,  163, 1965, 1964,
     1970, 2366, 2366, 2366, 2366,  400,  337,  181,  460,  200,
        0,  393,  270,  274,  379,  398,  340,  520, 2366, 2366,

     2366, 2366,  134, 1995,   76, 1978, 1969, 1965, 1968, 2019,
      401, 2002, 2000,  104, 1999, 1998,  409,  419,  411,  422,
      453,  469,  479,  466,  538,  540,  542,  557,  487,  559,
      561,  573,  575,  582,  592,  595,  609,  617,  628,  630,
      637,  640,  648,  655,  668,  675,  687,  690,  700,  710,
      713,  721,  728,  731,  735,  748,  756, 2366, 1975,  527,
      231,  793,    0,  130, 1961,    0,  316,  836,    0,    0,
        0, 1948, 1954, 1951,  161, 1951, 1928, 1921, 1923, 1912,
     1899, 1900, 1906, 1889,  174, 1891, 1893, 1889, 1894,  764,
     1901, 1876,  184, 1884, 1855,  882,  236,  784,  382,  289,

      338,  373,  423, 1861, 1860,  211,  263,  799,  830,  435,
      651,  853,  821,  693,  856,    0, 1870, 1858, 1855, 1824,
     1835,  217, 1833, 1824, 1817,    0, 1848,    0, 1843,  813,
      860,  874,  878,  905,  888,  909,  921,  925,  928,  937,
      941,  944,  948,  963,  980,  982,  991,  995,  998, 1002,
     1013, 1016, 1029, 1036, 1038, 1049, 1056, 1064, 1071, 1074,
     1081, 1083, 1091, 1099, 1106, 1108, 1116, 1131, 1133, 1142,
     1150, 1158, 1165, 1167, 1169, 1178,    0, 1797, 1810,  251,
     2366,    0,    0,    0, 1842, 1804, 1796, 1788, 1782, 1766,
     1761, 1759, 1763, 2366, 1754, 1742, 1731, 1731, 1744, 1738,

     1722, 1724, 1720, 1699, 1682, 1186, 1675, 1679, 1673, 1676,
     1671, 1661,  306,  357, 1246, 1201,  455,  691,  732,  439,
      499, 1222,  898,  491,  603,  506,  644,  759,  965, 1642,
     1635, 1634, 1631, 1185,  891, 1216, 1220, 1238, 1240, 1642,
     2366, 1650, 1628, 1618, 1619, 1616, 1613, 1605, 1591, 1623,
     1622, 1619, 1253,  137, 1619,  297, 1260, 1268, 1270, 1277,
     1291, 1302, 1305, 1312, 1314, 1316, 1323, 1325, 1337, 1350,
     1358, 1360, 1368, 1370, 1372, 1381, 1383, 1393, 1403, 1415,
     1418, 1425, 1429, 1436, 1440, 1450, 1452, 1461, 1471, 1473,
     1484, 1492, 1494, 1506, 1509, 1517, 1526, 1534, 1537, 1581,

     1572, 1574, 1572, 1555, 1565, 1549, 1540, 1540, 1552, 1530,
     1533, 1522, 1526, 1502, 1505, 1495, 1484, 1491, 1477, 1462,
     1466, 1472, 1464, 1448, 2366, 1435, 1448, 1430, 1442, 1554,
      961,  467,  993,  781, 1247, 1014, 1420, 2366, 2366, 1420,
     1094, 1244, 1485, 1394, 1529, 1442, 1434, 2366, 1418, 1413,
     1412,  513, 1404, 1408, 1432, 1426, 1421, 1414,  457,  312,
      430, 1149, 1548, 1562, 1565, 1573, 1575, 1582, 1585, 1593,
     1596, 1607, 1618, 1621, 1630, 1632, 1639, 1643, 1652, 1655,
     1664, 1675, 1677, 1687, 1689, 1691, 1700, 1702, 1709, 1712,
     1722, 1735, 1743, 2366, 1378, 1376, 1375, 1373, 1356, 1370,

     1351, 1356, 1346, 1332, 1322, 1306, 1308, 1291, 1285, 1291,
     1278, 1292, 2366, 1284, 1262, 1271, 1271, 2366, 2366, 1251,
     2366, 1245, 1742, 1757,  490,  606, 1288,  620, 1374, 2366,
     1243, 1550, 1723, 2366, 1273, 2366, 2366, 1239, 1281,  171,
     1214, 1231, 1257, 1249,  286, 1344, 1763,  660, 1750, 1763,
     1770, 1777, 1784, 1786, 1788, 1795, 1798, 1805, 1809, 1820,
     1830, 1837, 1840, 1847, 1851, 1855, 1862, 1865, 1874, 2366,
     2366, 1216, 1196, 1200, 1202, 1181, 1185, 1183, 1161, 1165,
     1168, 1164, 1163, 1132, 1113, 1111, 1104, 1117, 1101, 1100,
     1100, 2366, 2366, 1895,  623,  754, 1078, 1106, 2366, 1134,

     1078, 1079, 1080, 1119, 1087,  400,  497,  833, 1878, 1901,
     1905, 1909, 1912, 1916, 1920, 1924, 2366, 1041, 1043, 1038,
     2366, 1033, 1014, 2366, 1030, 1024, 1017, 1013, 1017,  994,
     1000,  995,  479,  990,  986,  967,  675, 1953, 1960,  975,
      995,  957,  952,  939,  994,  971,  674, 1886, 1937, 1968,
     1970, 1972,    0, 2366,  923,  915,  925,  903,  890,  878,
     2366,  869, 2366,  850,  858,  852,  842,  838,  826,  818,
     1986, 1819, 2366, 2366,  825,  811,  854,  824,  807, 1924,
     1979,    0,  766,  756,  760,  759,  736, 2366,  728,  724,
      719,  710,  691,  689,  676,  676,  673,  713,  962,  680,

     1978, 1993,  634,  639, 2366,  618,  600, 2366, 2366,  597,
      592,  585,  578,  563,  552,  542,  593,  570,  580,  563,
     1995,  519, 2366,  529, 2366, 2366,  503, 2366,  472, 2366,
      470,  493,  487,  486,  441,  410,  397,  325, 2366, 2366,
      368,  366,  339, 2366, 2366,  281,  264,  214,  171,  184,
      170,  138, 2366,    0,  814,  119,   59, 2366, 2042, 2054,
     2066, 2078, 2089, 2096, 2103, 2107, 2119, 2131, 2143, 2154,
     2159, 2168, 2180, 2192, 2203, 2205, 2212, 2216, 2220, 2226,
     2233, 2237, 2241, 2250, 2257, 2263, 2272, 2284, 2291, 2300,
     2307, 2316, 2327, 2334, 2338, 2345, 2346, 2353

    } ;

static yyconst flex_int16_t yy_def[799] =
    {   0,
      758,    1,  759,  759,  760,  760,  758,  758,  758,  758,
      758,  761,  762,  758,  758,  758,  758,  758,  763,  763,
      758,  758,  758,  758,  758,  764,  764,  764,  765,  766,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      758,  767,  758,  758,  767,  768,  758,  758,  758,  758,
      758,  761,  758,  761,  762,  762,  769,  762,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  763,  770,  758,
       20,  763,  763,  763,  763,  763,  763,  763,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  770,
      764,  758,  766,  765,  765,  771,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  758,  767,  767,
      767,  767,  768,  758,  758,  772,  761,  761,  769,  773,
      774,  762,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  775,  775,  775,  775,  775,

      775,  775,  775,  758,  758,  758,  758,  763,   20,  763,
      763,  763,  763,  763,  763,   98,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  776,  777,  778,  771,  779,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  162,  758,  758,  758,
      758,  168,  773,  774,  762,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  775,  770,  775,  775,  775,  775,  775,  775,
      775,  775,  315,  775,  775,  775,  775,  775,  775,  758,
      758,  758,  758,  763,  763,  763,  763,  763,  763,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  780,
      777,  781,  779,  353,  353,  758,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  758,

      758,  758,  758,  762,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  775,
      775,  775,  775,  775,  775,  775,  758,  758,  758,  758,
      763,  763,  763,  763,  763,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  780,  782,  781,  783,  758,  353,
      758,  758,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  758,  758,  758,  758,  762,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  770,  775,  775,  775,  775,  775,  775,  758,
      758,  763,  763,  758,  758,  758,  758,  758,  784,  758,
      758,  758,  782,  783,  785,  758,  758,  758,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  758,
      758,  758,  762,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  775,  775,  775,  758,  758,  758,  784,

      758,  758,  758,  758,  786,  785,  785,  758,  764,  764,
      764,  764,  764,  764,  764,  764,  758,  762,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  775,  758,
      758,  758,  758,  758,  787,  786,  785,  758,  764,  764,
      764,  764,  788,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  787,  789,  758,
      764,  788,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  789,

      758,  764,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  790,  758,  758,  791,
      764,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  790,  792,  791,  758,  758,  758,  758,  758,
      793,  792,  794,  758,  758,  758,  795,  794,  758,  795,
      758,  796,  758,  797,  796,  798,  798,    0,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758

    } ;

static yyconst flex_uint16_t yy_nxt[2434] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   14,   15,   16,
       17,   18,   14,   19,   20,   20,   14,   21,   22,   23,
       24,   25,   26,   26,   26,   26,   26,   27,   26,   26,
       26,   26,   26,   26,   26,   28,   26,   29,    8,   14,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       26,   40,   41,   42,   43,   44,   26,   45,   46,   47,
       48,   49,   50,   26,   26,   26,   51,   53,   53,   10,
       10,   63,   66,   59,   82,  751,   67,   54,   54,   84,
       86,   86,   86,   83,   63,   88,  110,   85,   57,   57,
       60,  112,   68,  103,  164,  104,   88,  110,  165,   59,

       88,  110,  112,   55,   55,   64,  112,  114,   88,  110,
      116,  170,  182,  105,  112,  113,   66,  106,   64,  107,
      227,   61,   69,  108,  183,  171,  113,  220,  109,  221,
      113,   88,  110,   88,  110,  751,   68,  112,  113,  112,
       88,  110,  117,  159,  161,  161,  112,   61,  758,  167,
      167,  118,  176,  354,  230,   70,  177,   71,   72,   73,
      217,  113,  178,  113,  218,   74,   75,  228,   76,   77,
      113,   78,   79,   80,  133,  119,   81,   87,  120,   88,
      110,  278,  758,  279,  134,  112,  754,   89,   90,   91,
       91,   91,  110,  758,  162,   88,  110,   88,  110,  168,

      751,  112,   92,  112,  184,   88,  110,  288,  185,  113,
      121,  112,  289,   88,  110,  300,  290,  186,  301,  112,
       93,   92,  753,  122,   94,  113,  601,  113,   95,  602,
      752,  135,  123,  309,   96,  113,   97,  758,  136,   98,
       87,  124,  310,  113,  161,  161,  125,  110,  126,  204,
       89,   90,   91,   91,   91,  332,  127,  139,  128,  205,
      206,  345,   88,  110,  333,   92,   88,  110,  112,  160,
      346,  758,  112,   88,  110,  758,  306,  306,  306,  112,
      751,  110,  758,   93,   92,  110,  758,   94,   88,  110,
      758,   95,  113,  129,  112,  402,  113,   96,  461,   97,

      110,  130,  607,  113,  403,  137,  131,  758,  140,  462,
      138,  210,  132,   88,  110,   88,  110,  110,  113,  112,
       63,  112,  749,  758,  141,  356,   88,  110,  354,  167,
      167,  211,  112,  142,   88,  110,   88,  110,   87,  758,
      112,  758,  112,  113,  143,  113,  325,   88,  110,  110,
      146,  110,  758,  112,   64,  230,  113,  144,  758,  147,
      145,  148,   88,  110,  113,  152,  113,  758,  112,  741,
      430,  430,  430,  153,  758,  149,  150,  113,  151,  155,
      758,  191,  156,  758,  110,  192,  746,  326,  154,  193,
      110,  758,  113,  110,  758,  194,  327,  195,  215,  758,

      157,   87,  207,  208,  110,  758,  209,  209,  209,  110,
      758,   88,  110,   86,   86,   86,  647,  112,  328,   88,
      110,   88,  110,  324,  758,  112,  190,  112,  212,   88,
      110,  461,   88,  110,  110,  112,  758,  213,  112,  356,
      758,  113,  462,  214,  191,  190,  110,  758,  192,  113,
      110,  113,  193,  231,  745,  744,  758,  743,  194,  113,
      195,   87,  113,   88,  110,  233,  110,  234,  758,  112,
      546,  546,  546,  196,  196,  196,   88,  110,  110,   88,
      110,  329,  112,  232,  328,  112,  198,  734,  758,   88,
      110,  758,  758,  113,  741,  112,  324,   88,  110,  334,

      758,  110,  110,  112,  199,  198,  113,  758,  200,  113,
      110,  235,  201,  607,  539,  740,  739,  110,  202,  113,
      203,  758,  236,  540,  237,  239,  241,  113,  666,  238,
      240,  110,  758,  216,  216,  216,  356,  667,  246,  159,
      161,  161,  216,  216,  216,  216,  216,  216,   88,  110,
       88,  110,   88,  110,  112,  431,  112,  329,  112,  433,
      738,  216,  216,  216,  216,  216,  216,   88,  110,   88,
      110,   88,  110,  112,  737,  112,  736,  112,  113,  230,
      113,  734,  113,   88,  110,   88,  110,  244,  719,  112,
      162,  112,   88,  110,  717,  732,  242,  113,  112,  113,

      243,  113,   88,  110,  758,   88,  110,  758,  112,  731,
      247,  112,  245,  113,  110,  113,  730,  110,  248,   88,
      110,  758,  113,  729,  758,  112,  249,   88,  110,  250,
      728,  110,  113,  112,  110,  113,  251,  727,   88,  110,
       88,  110,  726,  725,  112,  758,  112,   88,  110,  113,
       88,  110,  758,  112,  252,  110,  112,  113,   88,  110,
      254,  432,  110,  758,  112,   88,  110,  253,  113,  724,
      113,  112,  255,  548,  548,  548,  637,  113,   88,  110,
      113,  257,  723,  722,  112,   88,  110,  638,  113,  434,
      607,  112,  758,  256,  758,  113,  720,   88,  110,  258,

       88,  110,  110,  112,  110,  758,  112,  259,  113,  335,
       88,  110,  260,  356,  717,  113,  112,  261,  262,  263,
       88,  110,  716,   88,  110,  715,  112,  113,  714,  112,
      113,   88,  110,  758,  264,  265,  338,  112,   88,  110,
      113,   88,  110,  110,  112,   88,  110,  112,  325,  266,
      113,  112,  268,  113,  713,  758,  712,  267,   88,  110,
      758,  113,  269,  270,  112,  110,   88,  110,  113,  711,
      110,  113,  112,  207,  207,  113,  710,  306,  306,  306,
      271,  326,  758,  709,  273,  758,  272,  708,  113,  707,
      327,  274,  110,  207,  322,  110,  113,  323,  323,  323,

      758,  275,  435,  706,  705,  276,  277,  277,  277,  704,
      110,  758,  209,  209,  209,  277,  277,  277,  277,  277,
      277,  703,  758,  230,  527,  758,  353,  353,  353,  354,
      116,  160,  110,  758,  277,  277,  277,  277,  277,  277,
       63,  110,  758,  209,  209,  209,  648,  648,  648,  282,
      282,  282,  356,  356,  758,  699,   88,  758,  282,  282,
      282,  282,  282,  282,  110,  758,  337,  110,  758,  698,
       88,  110,  697,  696,   64,   88,  112,  282,  282,  282,
      282,  282,  282,   87,   88,  110,  695,  694,   88,  110,
      112,  693,  758,  314,  112,  315,  315,  315,   88,  110,

      113,  339,  110,  758,  112,  692,  336,  691,  316,  110,
      690,  323,  323,  323,  113,   88,  110,  357,  113,   88,
      110,  112,  689,  688,  313,  112,  317,  316,  113,  358,
      318,   88,  110,  360,  319,   88,  110,  112,   88,  110,
      320,  112,  321,  313,  112,  113,  359,   88,  110,  113,
      687,   88,  110,  112,   88,  110,  686,  112,   88,  110,
      112,  113,  758,  699,  112,  113,  758,  361,  113,  364,
      685,  718,  110,   88,  110,  684,  110,  113,  363,  112,
      719,  113,  365,  366,  113,  362,  683,  679,  113,  367,
       88,  110,   88,  110,  758,  645,  112,  677,  112,  676,

      368,   88,  110,  113,  110,   88,  110,  112,   88,  110,
      436,  112,   88,  110,  112,  758,  369,  675,  112,  525,
      113,  674,  113,   88,  110,  110,   88,  110,  673,  112,
      670,  113,  112,  371,  370,  113,  372,  669,  113,   88,
      110,  373,  113,  668,  374,  112,   88,  110,   88,  110,
      665,  526,  112,  113,  112,  664,  113,  529,  663,   88,
      110,  376,  662,  375,  661,  112,   88,  110,  660,  113,
      659,  658,  112,  657,   88,  110,  113,  378,  113,  656,
      112,   88,  110,  655,   88,  110,  654,  112,  377,  113,
      112,   88,  110,   88,  110,  758,  113,  112,  379,  112,

      653,   88,  110,  230,  113,  110,  758,  112,  380,   88,
      110,  113,  381,  382,  113,  112,   88,  110,   88,  110,
      645,  113,  112,  113,  112,  644,   88,  110,  643,  642,
      383,  113,  112,  384,  385,  758,  387,  386,  641,  113,
      640,   88,  110,   88,  110,  636,  113,  112,  113,  112,
      547,  389,   88,  110,  635,  634,  113,  633,  112,  388,
       88,  110,  548,  548,  548,  390,  112,  632,   88,  110,
      631,  113,  630,  113,  112,   88,  110,   88,  110,   88,
      110,  112,  113,  112,  391,  112,  758,   87,   88,  110,
      113,  629,  392,  393,  112,  394,  110,  758,  113,  306,

      306,  306,  758,  395,  628,  113,  627,  113,  626,  113,
      207,  322,  110,  625,  323,  323,  323,  758,  113,  396,
      624,  758,  398,  758,  623,  622,  397,  110,  758,  399,
      191,  110,  758,  110,  192,  323,  323,  323,  193,  758,
      621,  758,  620,  441,  194,  758,  195,   87,  758,  110,
      758,  110,  758,  619,  618,  110,  758,  314,  110,  315,
      315,  315,  617,  443,  459,  458,  353,  353,  353,  460,
       88,  110,  316,  605,  442,  604,  112,  603,   88,  110,
       88,  110,  539,  445,  112,  599,  112,   88,  110,  758,
      317,  316,  356,  112,  318,  598,  444,  597,  319,  110,

      113,   88,  110,  593,  320,  528,  321,  112,  113,  592,
      113,  591,   88,  110,  590,   88,  110,  113,  112,  589,
      463,  112,   88,  110,   88,  110,   88,  110,  112,  588,
      112,  113,  112,   88,  110,   88,  110,  587,  586,  112,
      585,  112,  113,  584,  583,  113,  595,   88,  110,  582,
      464,  581,  113,  112,  113,  608,  113,  546,  546,  546,
       88,  110,  580,  113,  465,  113,  112,  468,   88,  110,
       88,  110,  466,  467,  112,  758,  112,  113,   88,  110,
       88,  110,   88,  110,  112,  110,  112,  579,  112,  578,
      113,   88,  110,   88,  110,  758,  469,  112,  113,  112,

      113,  577,  576,   88,  110,  110,  758,  470,  113,  112,
      113,  473,  113,   88,  110,  575,  574,  471,  573,  112,
      572,  113,  571,  113,  570,   88,  110,  472,   88,  110,
      545,  112,  596,  113,  112,   88,  110,  458,  474,   88,
      110,  112,  230,  113,  475,  112,   88,  110,  112,  542,
       88,  110,  112,  541,  476,  113,  112,  538,  113,  537,
       88,  110,   88,  110,  536,  113,  112,  535,  112,  113,
      534,   88,  110,  531,  479,  530,  113,  112,  477,  478,
      113,   88,  110,   88,  110,  522,  758,  112,  521,  112,
      113,  520,  113,  519,   88,  110,  110,  758,  482,  480,

      112,  113,   88,  110,   88,  110,  518,  481,  112,  517,
      112,  113,  516,  113,  515,  484,   88,  110,  483,   88,
      110,  514,  112,  513,  113,  112,  485,   88,  110,  486,
      758,  512,  113,  112,  113,  487,   88,  110,  511,  488,
      110,  758,  112,  532,   88,  110,  113,   88,  110,  113,
      112,  758,  510,  112,  509,  758,  508,  113,   88,  110,
      489,  110,  758,  490,  112,  523,  113,  524,  524,  524,
      491,  507,   88,  110,  113,   88,  110,  113,  112,  506,
      492,  112,  493,   88,  110,   88,  110,  533,  113,  112,
      505,  112,   88,  110,  504,   88,  110,  503,  112,  502,

      501,  112,  113,   88,  110,  113,   88,  110,  500,  112,
      549,  499,  112,  113,  498,  113,  497,   88,  110,  496,
      551,  495,  113,  112,  550,  113,  494,  552,   88,  110,
      758,   88,  110,  113,  112,  458,  113,  112,  456,  112,
       88,  110,   88,  110,  554,  454,  112,  113,  112,   88,
      110,  453,  553,   88,  110,  112,  555,  452,  113,  112,
      451,  113,   88,  110,  450,   88,  110,  449,  112,  556,
      113,  112,  113,  448,   88,  110,  447,  558,  446,  113,
      112,  440,  557,  113,  559,   88,  110,   88,  110,  439,
      438,  112,  113,  112,  437,  113,  560,   88,  110,   88,

      110,   88,  110,  112,  113,  112,  429,  112,  562,  561,
       88,  110,   88,  110,  428,  113,  112,  113,  112,   88,
      110,  427,   88,  110,  758,  112,  426,  113,  112,  113,
      563,  113,   88,  110,  110,  758,  565,  425,  112,  424,
      113,  423,  113,  758,  422,   88,  110,  564,  567,  113,
      566,  112,  113,   88,  110,  594,  594,  594,  758,  112,
       88,  110,  113,  421,  547,  420,  112,  419,  523,  568,
      524,  524,  524,   88,  110,  113,  548,  548,  548,  112,
       88,  110,  418,  113,  417,  416,  112,   88,  110,  415,
      113,  414,  569,  112,   88,  110,   88,  110,   88,  110,

      112,  413,  112,  113,  112,   88,  110,  609,   88,  110,
      113,  112,  412,  411,  112,   88,  110,  113,  410,   88,
      110,  112,  610,  409,  113,  112,  113,  408,  113,  407,
       88,  110,  672,  672,  672,  113,  112,  406,  113,  613,
       88,  110,  612,  611,  405,  113,  112,   88,  110,  113,
       88,  110,  404,  112,  401,  400,  112,   88,  110,  116,
      113,   88,  110,  112,  230,   88,  110,  112,  349,  348,
      113,  112,   88,  110,  347,   88,  110,  113,  112,  344,
      113,  112,  343,  614,   88,  110,  342,  113,   88,  110,
      112,  113,  341,  340,  112,  113,  637,  680,  615,  648,

      648,  648,  113,  331,  330,  113,  110,  638,  639,  639,
      639,   88,  110,  312,  113,   88,  110,  112,  113,   88,
      110,  112,   88,  110,  616,  112,   88,  110,  112,  311,
       88,  110,  112,  308,   88,  110,  112,  701,  701,  701,
      112,  113,  307,  305,  304,  113,  303,   88,  110,  113,
      302,  299,  113,  112,  671,  298,  113,  297,  296,  649,
      113,  637,  650,  651,  113,  652,  672,  672,  672,  295,
      294,  110,  638,  639,  639,  639,  293,  113,   88,  110,
       88,  110,   88,  110,  112,  292,  112,  671,  112,   88,
      110,  701,  701,  701,  291,  112,  287,  681,  286,  672,

      672,  672,  285,   88,  110,   88,  110,  280,  113,  112,
      113,  112,  113,  160,  230,  227,  112,  356,  226,  113,
      758,  225,  224,  223,  222,  219,  702,  189,  188,  187,
      181,  180,  179,  113,  175,  113,  174,  173,  172,  166,
       58,  721,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   62,   62,  160,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   65,   65,
      158,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       88,  112,   88,   88,   88,  102,  101,   88,   88,  111,

      100,  111,  111,   99,  111,  111,   58,  111,  115,  115,
      758,  115,  113,  113,  758,  113,  113,  758,  113,  159,
      159,  758,  159,  758,  159,  159,  159,  159,  159,  159,
      159,  163,  163,  758,  163,  163,  163,  163,  758,  163,
      163,  163,  163,  169,  169,  758,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  197,  758,  758,  758,  197,
      758,  758,  197,  197,  229,  229,  758,  229,  281,  281,
      281,  281,  281,  758,  281,  281,  758,  758,  281,  281,
      283,  283,  758,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  284,  284,  758,  284,  284,  284,  284,  284,

      284,  284,  284,  284,  313,  758,  313,  758,  313,  758,
      758,  313,  313,  350,  350,  758,  350,  351,  351,  758,
      351,  352,  758,  758,  352,  355,  355,  758,  355,  758,
      355,  455,  455,  758,  455,  455,  758,  455,  457,  457,
      758,  457,  543,  543,  758,  543,  544,  544,  758,  544,
      600,  600,  758,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  606,  606,  758,  606,  758,  606,  646,  646,
      758,  646,  678,  678,  758,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  682,  682,  758,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  700,  700,  758,  700,

      733,  733,  758,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  735,  735,  758,  735,  742,  742,  758,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  747,  758,
      758,  758,  758,  758,  758,  747,  747,  758,  747,  748,
      748,  758,  748,  750,  750,  758,  750,  750,  758,  750,
      755,  755,  758,  755,  756,  756,  758,  756,  757,  757,
      758,  757,  757,  758,  757,    7,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758
    } ;

static yyconst flex_int16_t yy_chk[2434] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        6,   12,   13,   11,   16,  757,   13,    3,    4,   17,
       18,   18,   18,   16,   62,   26,   26,   17,    5,    6,
       11,   26,   13,   25,   57,   25,   27,   27,   57,   59,

       28,   28,   27,    3,    4,   12,   28,   29,   31,   31,
       29,   67,   77,   25,   31,   26,   66,   25,   62,   25,
      114,   11,   15,   25,   77,   67,   27,  105,   25,  105,
       28,   32,   32,   37,   37,  756,   66,   32,   31,   37,
       38,   38,   31,   55,   55,   55,   38,   59,  354,   64,
       64,   31,   73,  354,  752,   15,   73,   15,   15,   15,
      103,   32,   73,   37,  103,   15,   15,  114,   15,   15,
       38,   15,   15,   15,   37,   32,   15,   19,   32,   33,
       33,  164,   88,  164,   38,   33,  751,   19,   19,   19,
       19,   19,   88,   88,   55,   39,   39,   34,   34,   64,

      750,   39,   19,   34,   78,   35,   35,  175,   78,   33,
       33,   35,  175,   41,   41,  185,  175,   78,  185,   41,
       19,   19,  749,   33,   19,   39,  540,   34,   19,  540,
      748,   39,   34,  193,   19,   35,   19,  197,   39,   19,
       20,   34,  193,   41,  161,  161,   35,  197,   35,   90,
       20,   20,   20,   20,   20,  206,   35,   41,   35,   90,
       90,  222,   36,   36,  206,   20,   40,   40,   36,  161,
      222,   93,   40,   42,   42,   94,  207,  207,  207,   42,
      747,   93,   93,   20,   20,   94,   94,   20,   43,   43,
      200,   20,   36,   36,   43,  280,   40,   20,  356,   20,

      200,   36,  545,   42,  280,   40,   36,  313,   42,  356,
       40,   93,   36,   44,   44,   45,   45,  313,   43,   44,
      167,   45,  746,  460,   43,  545,   46,   46,  460,  167,
      167,   94,   46,   43,   47,   47,   48,   48,   87,  201,
       47,   97,   48,   44,   44,   45,  200,   49,   49,  201,
       45,   97,   97,   49,  167,  743,   46,   44,  314,   46,
       44,   46,   50,   50,   47,   47,   48,  742,   50,  741,
      314,  314,  314,   47,  202,   46,   46,   49,   46,   48,
       95,   87,   49,  199,  202,   87,  738,  201,   47,   87,
       95,   95,   50,  199,   92,   87,  201,   87,   97,   96,

       50,   86,   92,   92,   92,   92,   92,   92,   92,   96,
       96,  111,  111,   86,   86,   86,  606,  111,  202,  117,
      117,  119,  119,  199,  203,  117,   86,  119,   95,  118,
      118,  461,  120,  120,  203,  118,  210,   95,  120,  606,
      320,  111,  461,   96,   86,   86,  210,  210,   86,  117,
      320,  119,   86,  117,  737,  736,  317,  735,   86,  118,
       86,   89,  120,  121,  121,  119,  317,  120,  432,  121,
      459,  459,  459,   89,   89,   89,  124,  124,  432,  122,
      122,  203,  124,  118,  320,  122,   89,  734,  733,  123,
      123,  525,  324,  121,  732,  123,  317,  129,  129,  210,

      321,  525,  324,  129,   89,   89,  124,  326,   89,  122,
      321,  121,   89,  607,  452,  731,  729,  326,   89,  123,
       89,   98,  122,  452,  122,  123,  124,  129,  633,  122,
      123,   98,   98,   98,   98,   98,  607,  633,  129,  160,
      160,  160,   98,   98,   98,   98,   98,   98,  125,  125,
      126,  126,  127,  127,  125,  324,  126,  321,  127,  326,
      727,   98,   98,   98,   98,   98,   98,  128,  128,  130,
      130,  131,  131,  128,  724,  130,  722,  131,  125,  720,
      126,  719,  127,  132,  132,  133,  133,  127,  718,  132,
      160,  133,  134,  134,  717,  716,  125,  128,  134,  130,

      126,  131,  135,  135,  325,  136,  136,  526,  135,  715,
      130,  136,  128,  132,  325,  133,  714,  526,  131,  137,
      137,  528,  134,  713,  595,  137,  132,  138,  138,  133,
      712,  528,  135,  138,  595,  136,  134,  711,  139,  139,
      140,  140,  710,  707,  139,  327,  140,  141,  141,  137,
      142,  142,  211,  141,  136,  327,  142,  138,  143,  143,
      138,  325,  211,  211,  143,  144,  144,  137,  139,  706,
      140,  144,  139,  548,  548,  548,  637,  141,  145,  145,
      142,  142,  704,  703,  145,  146,  146,  637,  143,  327,
      647,  146,  318,  140,  214,  144,  700,  147,  147,  142,

      148,  148,  318,  147,  214,  214,  148,  143,  145,  211,
      149,  149,  144,  647,  698,  146,  149,  145,  146,  146,
      150,  150,  697,  151,  151,  696,  150,  147,  695,  151,
      148,  152,  152,  319,  146,  147,  214,  152,  153,  153,
      149,  154,  154,  319,  153,  155,  155,  154,  318,  148,
      150,  155,  150,  151,  694,  596,  693,  149,  156,  156,
      328,  152,  151,  152,  156,  596,  157,  157,  153,  692,
      328,  154,  157,  190,  190,  155,  691,  190,  190,  190,
      153,  319,  434,  690,  155,  198,  154,  689,  156,  687,
      319,  156,  434,  198,  198,  198,  157,  198,  198,  198,

      208,  157,  328,  686,  685,  157,  162,  162,  162,  684,
      208,  208,  208,  208,  208,  162,  162,  162,  162,  162,
      162,  683,  213,  679,  434,  678,  230,  230,  230,  230,
      755,  162,  213,  213,  162,  162,  162,  162,  162,  162,
      168,  209,  209,  209,  209,  209,  608,  608,  608,  168,
      168,  168,  230,  755,  212,  677,  209,  215,  168,  168,
      168,  168,  168,  168,  212,  212,  213,  215,  215,  676,
      231,  231,  675,  670,  168,  209,  231,  168,  168,  168,
      168,  168,  168,  196,  232,  232,  669,  668,  233,  233,
      232,  667,  335,  196,  233,  196,  196,  196,  235,  235,

      231,  215,  335,  335,  235,  666,  212,  665,  196,  323,
      664,  323,  323,  323,  232,  234,  234,  231,  233,  236,
      236,  234,  662,  660,  323,  236,  196,  196,  235,  233,
      196,  237,  237,  235,  196,  238,  238,  237,  239,  239,
      196,  238,  196,  323,  239,  234,  234,  240,  240,  236,
      659,  241,  241,  240,  242,  242,  658,  241,  243,  243,
      242,  237,  431,  699,  243,  238,  329,  236,  239,  239,
      657,  699,  431,  244,  244,  656,  329,  240,  238,  244,
      699,  241,  240,  241,  242,  237,  655,  646,  243,  242,
      245,  245,  246,  246,  433,  645,  245,  644,  246,  643,

      243,  247,  247,  244,  433,  248,  248,  247,  249,  249,
      329,  248,  250,  250,  249,  436,  244,  642,  250,  431,
      245,  641,  246,  251,  251,  436,  252,  252,  640,  251,
      636,  247,  252,  246,  245,  248,  247,  635,  249,  253,
      253,  249,  250,  634,  250,  253,  254,  254,  255,  255,
      632,  433,  254,  251,  255,  631,  252,  436,  630,  256,
      256,  252,  629,  251,  628,  256,  257,  257,  627,  253,
      626,  625,  257,  623,  258,  258,  254,  254,  255,  622,
      258,  259,  259,  620,  260,  260,  619,  259,  253,  256,
      260,  261,  261,  262,  262,  441,  257,  261,  255,  262,

      618,  263,  263,  605,  258,  441,  441,  263,  256,  264,
      264,  259,  257,  258,  260,  264,  265,  265,  266,  266,
      604,  261,  265,  262,  266,  603,  267,  267,  602,  601,
      259,  263,  267,  260,  261,  600,  263,  262,  598,  264,
      597,  268,  268,  269,  269,  591,  265,  268,  266,  269,
      462,  265,  270,  270,  590,  589,  267,  588,  270,  264,
      271,  271,  462,  462,  462,  267,  271,  587,  272,  272,
      586,  268,  585,  269,  272,  273,  273,  274,  274,  275,
      275,  273,  270,  274,  268,  275,  334,  306,  276,  276,
      271,  584,  269,  270,  276,  271,  334,  334,  272,  306,

      306,  306,  316,  272,  583,  273,  582,  274,  581,  275,
      316,  316,  316,  580,  316,  316,  316,  336,  276,  273,
      579,  337,  275,  322,  578,  577,  274,  336,  336,  276,
      306,  337,  337,  322,  306,  322,  322,  322,  306,  338,
      576,  339,  575,  334,  306,  442,  306,  315,  435,  338,
      338,  339,  339,  574,  573,  442,  442,  315,  435,  315,
      315,  315,  572,  337,  353,  544,  353,  353,  353,  353,
      357,  357,  315,  543,  336,  542,  357,  541,  358,  358,
      359,  359,  539,  339,  358,  538,  359,  360,  360,  527,
      315,  315,  353,  360,  315,  535,  338,  531,  315,  527,

      357,  361,  361,  522,  315,  435,  315,  361,  358,  520,
      359,  517,  362,  362,  516,  363,  363,  360,  362,  515,
      359,  363,  364,  364,  365,  365,  366,  366,  364,  514,
      365,  361,  366,  367,  367,  368,  368,  512,  511,  367,
      510,  368,  362,  509,  508,  363,  527,  369,  369,  507,
      361,  506,  364,  369,  365,  546,  366,  546,  546,  546,
      370,  370,  505,  367,  363,  368,  370,  366,  371,  371,
      372,  372,  364,  365,  371,  529,  372,  369,  373,  373,
      374,  374,  375,  375,  373,  529,  374,  504,  375,  503,
      370,  376,  376,  377,  377,  444,  369,  376,  371,  377,

      372,  502,  501,  378,  378,  444,  444,  370,  373,  378,
      374,  374,  375,  379,  379,  500,  499,  371,  498,  379,
      497,  376,  496,  377,  495,  380,  380,  373,  381,  381,
      458,  380,  529,  378,  381,  382,  382,  457,  376,  383,
      383,  382,  456,  379,  378,  383,  384,  384,  455,  454,
      385,  385,  384,  453,  379,  380,  385,  451,  381,  450,
      386,  386,  387,  387,  449,  382,  386,  447,  387,  383,
      446,  388,  388,  440,  383,  437,  384,  388,  381,  382,
      385,  389,  389,  390,  390,  429,  443,  389,  428,  390,
      386,  427,  387,  426,  391,  391,  443,  443,  387,  385,

      391,  388,  392,  392,  393,  393,  424,  386,  392,  423,
      393,  389,  422,  390,  421,  389,  394,  394,  388,  395,
      395,  420,  394,  419,  391,  395,  390,  396,  396,  391,
      445,  418,  392,  396,  393,  392,  397,  397,  417,  393,
      445,  445,  397,  443,  398,  398,  394,  399,  399,  395,
      398,  532,  416,  399,  415,  430,  414,  396,  463,  463,
      394,  532,  532,  394,  463,  430,  397,  430,  430,  430,
      396,  413,  464,  464,  398,  465,  465,  399,  464,  412,
      397,  465,  399,  466,  466,  467,  467,  445,  463,  466,
      411,  467,  468,  468,  410,  469,  469,  409,  468,  408,

      407,  469,  464,  470,  470,  465,  471,  471,  406,  470,
      465,  405,  471,  466,  404,  467,  403,  472,  472,  402,
      467,  401,  468,  472,  466,  469,  400,  468,  473,  473,
      355,  474,  474,  470,  473,  352,  471,  474,  351,  350,
      475,  475,  476,  476,  471,  349,  475,  472,  476,  477,
      477,  348,  470,  478,  478,  477,  472,  347,  473,  478,
      346,  474,  479,  479,  345,  480,  480,  344,  479,  473,
      475,  480,  476,  343,  481,  481,  342,  476,  340,  477,
      481,  333,  474,  478,  477,  482,  482,  483,  483,  332,
      331,  482,  479,  483,  330,  480,  478,  484,  484,  485,

      485,  486,  486,  484,  481,  485,  312,  486,  481,  479,
      487,  487,  488,  488,  311,  482,  487,  483,  488,  489,
      489,  310,  490,  490,  533,  489,  309,  484,  490,  485,
      483,  486,  491,  491,  533,  533,  485,  308,  491,  307,
      487,  305,  488,  523,  304,  492,  492,  484,  487,  489,
      486,  492,  490,  493,  493,  523,  523,  523,  524,  493,
      549,  549,  491,  303,  547,  302,  549,  301,  524,  489,
      524,  524,  524,  550,  550,  492,  547,  547,  547,  550,
      551,  551,  300,  493,  299,  298,  551,  552,  552,  297,
      549,  296,  492,  552,  553,  553,  554,  554,  555,  555,

      553,  295,  554,  550,  555,  556,  556,  549,  557,  557,
      551,  556,  293,  292,  557,  558,  558,  552,  291,  559,
      559,  558,  550,  290,  553,  559,  554,  289,  555,  288,
      560,  560,  672,  672,  672,  556,  560,  287,  557,  557,
      561,  561,  555,  554,  286,  558,  561,  562,  562,  559,
      563,  563,  285,  562,  279,  278,  563,  564,  564,  229,
      560,  565,  565,  564,  227,  566,  566,  565,  225,  224,
      561,  566,  567,  567,  223,  568,  568,  562,  567,  221,
      563,  568,  220,  561,  569,  569,  219,  564,  609,  609,
      569,  565,  218,  217,  609,  566,  594,  648,  564,  648,

      648,  648,  567,  205,  204,  568,  594,  594,  594,  594,
      594,  610,  610,  195,  569,  611,  611,  610,  609,  612,
      612,  611,  613,  613,  568,  612,  614,  614,  613,  194,
      615,  615,  614,  192,  616,  616,  615,  680,  680,  680,
      616,  610,  191,  189,  188,  611,  187,  649,  649,  612,
      186,  184,  613,  649,  638,  183,  614,  182,  181,  611,
      615,  639,  612,  613,  616,  615,  638,  638,  638,  180,
      179,  639,  639,  639,  639,  639,  178,  649,  650,  650,
      651,  651,  652,  652,  650,  177,  651,  671,  652,  681,
      681,  701,  701,  701,  176,  681,  174,  649,  173,  671,

      671,  671,  172,  702,  702,  721,  721,  165,  650,  702,
      651,  721,  652,  159,  116,  115,  113,  701,  112,  681,
      110,  109,  108,  107,  106,  104,  681,   81,   80,   79,
       76,   75,   74,  702,   72,  721,   71,   70,   68,   61,
       58,  702,  759,  759,  759,  759,  759,  759,  759,  759,
      759,  759,  759,  759,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  761,  761,   52,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  762,  762,
       51,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      763,   30,  763,  763,  763,   24,   23,  763,  763,  764,

       22,  764,  764,   21,  764,  764,    9,  764,  765,  765,
        7,  765,  766,  766,    0,  766,  766,    0,  766,  767,
      767,    0,  767,    0,  767,  767,  767,  767,  767,  767,
      767,  768,  768,    0,  768,  768,  768,  768,    0,  768,
      768,  768,  768,  769,  769,    0,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  770,    0,    0,    0,  770,
        0,    0,  770,  770,  771,  771,    0,  771,  772,  772,
      772,  772,  772,    0,  772,  772,    0,    0,  772,  772,
      773,  773,    0,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  774,  774,    0,  774,  774,  774,  774,  774,

      774,  774,  774,  774,  775,    0,  775,    0,  775,    0,
        0,  775,  775,  776,  776,    0,  776,  777,  777,    0,
      777,  778,    0,    0,  778,  779,  779,    0,  779,    0,
      779,  780,  780,    0,  780,  780,    0,  780,  781,  781,
        0,  781,  782,  782,    0,  782,  783,  783,    0,  783,
      784,  784,    0,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  785,  785,    0,  785,    0,  785,  786,  786,
        0,  786,  787,  787,    0,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  788,  788,    0,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  789,  789,    0,  789,

      790,  790,    0,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  791,  791,    0,  791,  792,  792,    0,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  793,    0,
        0,    0,    0,    0,    0,  793,  793,    0,  793,  794,
      794,    0,  794,  795,  795,    0,  795,  795,    0,  795,
      796,  796,    0,  796,  797,  797,    0,  797,  798,  798,
        0,  798,  798,    0,  798,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,

      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      758,  758,  758
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int bro_flex_debug;
int bro_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *brotext;
#line 1 "scan.l"
#line 2 "scan.l"
// See the file "COPYING" in the main distribution directory for copyright.

#include <errno.h>

#include <stack>
#include <list>
#include <string>
#include <algorithm>
#include <sys/stat.h>
#include <sys/param.h>
#include <unistd.h>
#include <libgen.h>

#include "input.h"
#include "util.h"
#include "Scope.h"
#include "DNS_Mgr.h"
#include "Expr.h"
#include "Func.h"
#include "Stmt.h"
#include "Var.h"
#include "Debug.h"
#include "PolicyFile.h"
#include "broparse.h"
#include "Reporter.h"
#include "RE.h"
#include "Net.h"
#include "Traverse.h"

#include "analyzer/Analyzer.h"
#include "broxygen/Manager.h"

#include "plugin/Manager.h"

extern YYLTYPE yylloc;	// holds start line and column of token
extern EnumType* cur_enum_type;

// Track the @if... depth.
ptr_compat_int current_depth = 0;

int_list if_stack;

int line_number = 1;
const char* filename = 0; // Absolute path of file currently being parsed.
static const char* last_id_tok = 0;

char last_tok[128];

#define YY_USER_ACTION	strncpy(last_tok, brotext, sizeof(last_tok) - 1);
#define YY_USER_INIT	last_tok[0] = '\0';

// We define our own YY_INPUT because we want to trap the case where
// a read fails.
#define YY_INPUT(buf,result,max_size) \
	if ( ((result = fread(buf, 1, max_size, broin)) == 0) && ferror(broin) ) \
		reporter->Error("read failed with \"%s\"", strerror(errno));

static void deprecated_attr(const char* attr)
	{
	reporter->Warning("Use of deprecated attribute: %s", attr);
	}

static string find_relative_file(const string& filename, const string& ext)
	{
	if ( filename.empty() )
		return string();

	if ( filename[0] == '.' )
		return find_file(filename, SafeDirname(::filename).result, ext);
	else
		return find_file(filename, bro_path(), ext);
	}

static ino_t get_inode_num(FILE* f, const string& path)
	{
	struct stat b;

	if ( fstat(fileno(f), &b) )
		reporter->FatalError("fstat of %s failed: %s\n", path.c_str(),
		                     strerror(errno));

	return b.st_ino;
	}

static ino_t get_inode_num(const string& path)
	{
	FILE* f = open_file(path);

	if ( ! f )
		reporter->FatalError("failed to open %s\n", path.c_str());

	ino_t inum = get_inode_num(f, path);
	fclose(f);

	return inum;
	}

class FileInfo {
public:
	FileInfo(string restore_module = "");
	~FileInfo();

	YY_BUFFER_STATE buffer_state;
	string restore_module;
	const char* name;
	int line;
	int level;
};

// A stack of input buffers we're scanning.  file_stack[len-1] is the
// top of the stack.
declare(PList,FileInfo);
static PList(FileInfo) file_stack;

#define RET_CONST(v) \
	{ \
	yylval.val = v; \
	return TOK_CONSTANT; \
	}

// Returns true if the file is new, false if it's already been scanned.
static int load_files(const char* file);

// ### TODO: columns too - use yyless with '.' action?


#line 1408 "/home/ubuntu/bro/my_build_dir/src/scan.cc"

#define INITIAL 0
#define RE 1
#define IGNORE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int brolex_destroy (void );

int broget_debug (void );

void broset_debug (int debug_flag  );

YY_EXTRA_TYPE broget_extra (void );

void broset_extra (YY_EXTRA_TYPE user_defined  );

FILE *broget_in (void );

void broset_in  (FILE * _in_str  );

FILE *broget_out (void );

void broset_out  (FILE * _out_str  );

yy_size_t broget_leng (void );

char *broget_text (void );

int broget_lineno (void );

void broset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int browrap (void );
#else
extern int browrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( brotext, broleng, 1, broout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( broin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( broin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, broin))==0 && ferror(broin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(broin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int brolex (void);

#define YY_DECL int brolex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after brotext and broleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! broin )
			broin = stdin;

		if ( ! broout )
			broout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			broensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				bro_create_buffer(broin,YY_BUF_SIZE );
		}

		bro_load_buffer_state( );
		}

	{
#line 146 "scan.l"


#line 1629 "/home/ubuntu/bro/my_build_dir/src/scan.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of brotext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 759 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2366 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 148 "scan.l"
{
	broxygen_mgr->SummaryComment(::filename, brotext + 3);
	}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 152 "scan.l"
{
	string hint(cur_enum_type && last_id_tok ?
	            make_full_var_name(current_module.c_str(), last_id_tok) : "");

	broxygen_mgr->PostComment(brotext + 3, hint);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 159 "scan.l"
{
	if ( brotext[2] != '#' )
		broxygen_mgr->PreComment(brotext + 2);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 164 "scan.l"
return TOK_NO_TEST;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 166 "scan.l"
/* eat comments */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 168 "scan.l"
/* eat whitespace */
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 170 "scan.l"
{
			++line_number;
			++yylloc.first_line;
			++yylloc.last_line;
			}
	YY_BREAK
/* IPv6 literal constant patterns */
case 8:
YY_RULE_SETUP
#line 177 "scan.l"
{
	RET_CONST(new AddrVal(extract_ip(brotext)))
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 181 "scan.l"
{
	int len = 0;
	string ip = extract_ip_and_len(brotext, &len);
	RET_CONST(new SubNetVal(IPPrefix(IPAddr(ip), len, true)))
}
	YY_BREAK
/* IPv4 literal constant patterns */
case 10:
YY_RULE_SETUP
#line 188 "scan.l"
RET_CONST(new AddrVal(brotext))
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 190 "scan.l"
{
	int len = 0;
	string ip = extract_ip_and_len(brotext, &len);
	RET_CONST(new SubNetVal(IPPrefix(IPAddr(ip), len)))
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 196 "scan.l"
return brotext[0];
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 198 "scan.l"
return TOK_DECR;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 199 "scan.l"
return TOK_INCR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 201 "scan.l"
return TOK_ADD_TO;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 202 "scan.l"
return TOK_REMOVE_FROM;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 204 "scan.l"
return TOK_EQ;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 205 "scan.l"
return TOK_NE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 206 "scan.l"
return TOK_GE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 207 "scan.l"
return TOK_LE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 209 "scan.l"
return TOK_AND;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 210 "scan.l"
return TOK_OR;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 212 "scan.l"
return TOK_ADD;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 213 "scan.l"
return TOK_ADDR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 214 "scan.l"
return TOK_ANY;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 215 "scan.l"
return TOK_BOOL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 216 "scan.l"
return TOK_BREAK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 217 "scan.l"
return TOK_CASE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 218 "scan.l"
return TOK_OPTION;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 219 "scan.l"
return TOK_CONST;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 220 "scan.l"
return TOK_COPY;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 221 "scan.l"
return TOK_COUNT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 222 "scan.l"
return TOK_COUNTER;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 223 "scan.l"
return TOK_DEFAULT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 224 "scan.l"
return TOK_DELETE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 225 "scan.l"
return TOK_DOUBLE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 226 "scan.l"
return TOK_ELSE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 227 "scan.l"
return TOK_ENUM;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 228 "scan.l"
return TOK_EVENT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 229 "scan.l"
return TOK_EXPORT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 230 "scan.l"
return TOK_FALLTHROUGH;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 231 "scan.l"
return TOK_FILE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 232 "scan.l"
return TOK_FOR;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 233 "scan.l"
return TOK_WHILE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 234 "scan.l"
return TOK_FUNCTION;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 235 "scan.l"
return TOK_GLOBAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 236 "scan.l"
return TOK_HAS_FIELD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 237 "scan.l"
return TOK_HOOK;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 238 "scan.l"
return TOK_IF;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 239 "scan.l"
return TOK_IN;
	YY_BREAK
case 51:
/* rule 51 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up brotext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up brotext again */
YY_RULE_SETUP
#line 240 "scan.l"
return TOK_NOT_IN;	/* don't confuse w "! infoo"! */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 241 "scan.l"
return TOK_INT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 242 "scan.l"
return TOK_INTERVAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 243 "scan.l"
return TOK_LIST;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 244 "scan.l"
return TOK_LOCAL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 245 "scan.l"
return TOK_MODULE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 246 "scan.l"
return TOK_NEXT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 247 "scan.l"
return TOK_OF;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 248 "scan.l"
return TOK_OPAQUE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 249 "scan.l"
return TOK_PATTERN;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 250 "scan.l"
return TOK_PORT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 251 "scan.l"
return TOK_PRINT;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 252 "scan.l"
return TOK_RECORD;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 253 "scan.l"
return TOK_REDEF;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 254 "scan.l"
return TOK_RETURN;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 255 "scan.l"
return TOK_SCHEDULE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 256 "scan.l"
return TOK_SET;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 257 "scan.l"
return TOK_STRING;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 258 "scan.l"
return TOK_SUBNET;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 259 "scan.l"
return TOK_SWITCH;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 260 "scan.l"
return TOK_TABLE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 261 "scan.l"
return TOK_TIME;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 262 "scan.l"
return TOK_TIMEOUT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 263 "scan.l"
return TOK_TIMER;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 264 "scan.l"
return TOK_TYPE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 265 "scan.l"
return TOK_UNION;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 266 "scan.l"
return TOK_VECTOR;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 267 "scan.l"
return TOK_WHEN;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 269 "scan.l"
return TOK_ATTR_ADD_FUNC;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 270 "scan.l"
return TOK_ATTR_EXPIRE_CREATE;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 271 "scan.l"
return TOK_ATTR_DEFAULT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 272 "scan.l"
return TOK_ATTR_DEL_FUNC;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 273 "scan.l"
return TOK_ATTR_DEPRECATED;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 274 "scan.l"
return TOK_ATTR_RAW_OUTPUT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 275 "scan.l"
return TOK_ATTR_ERROR_HANDLER;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 276 "scan.l"
return TOK_ATTR_EXPIRE_FUNC;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 277 "scan.l"
return TOK_ATTR_LOG;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 278 "scan.l"
return TOK_ATTR_OPTIONAL;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 279 "scan.l"
return TOK_ATTR_PRIORITY;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 280 "scan.l"
return TOK_ATTR_TYPE_COLUMN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 281 "scan.l"
return TOK_ATTR_EXPIRE_READ;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 282 "scan.l"
return TOK_ATTR_REDEF;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 283 "scan.l"
return TOK_ATTR_EXPIRE_WRITE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 285 "scan.l"
{
	deprecated_attr(brotext);
	return TOK_ATTR_ENCRYPT;
	}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 290 "scan.l"
{
	// Not yet deprecated, but soon.
	//deprecated_attr(brotext);
	return TOK_ATTR_MERGEABLE;
	}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 296 "scan.l"
{
	// Not yet deprecated, but soon.
	//deprecated_attr(brotext);
	return TOK_ATTR_PERSISTENT;
	}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 302 "scan.l"
{
	deprecated_attr(brotext);
	return TOK_ATTR_ROTATE_INTERVAL;
	}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 307 "scan.l"
{
	deprecated_attr(brotext);
	return TOK_ATTR_ROTATE_SIZE;
	}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 312 "scan.l"
{
	// Not yet deprecated, but soon.
	//deprecated_attr(brotext);
	return TOK_ATTR_SYNCHRONIZED;
	}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 319 "scan.l"
return TOK_DEBUG;	// marks input for debugger
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 321 "scan.l"
{
	string rval = SafeDirname(::filename).result;

	if ( ! rval.empty() && rval[0] == '.' )
		{
		char path[MAXPATHLEN];

		if ( ! getcwd(path, MAXPATHLEN) )
			reporter->InternalError("getcwd failed: %s", strerror(errno));
		else
			rval = string(path) + "/" + rval;
		}

	RET_CONST(new StringVal(rval.c_str()));
	}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 337 "scan.l"
{
	RET_CONST(new StringVal(SafeBasename(::filename).result));
	}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 341 "scan.l"
{
	const char* new_file = skip_whitespace(brotext + 5);	// Skip "@load".
	string loader = ::filename;  // load_files may change ::filename, save copy
	string loading = find_relative_file(new_file, "bro");
	(void) load_files(new_file);
	broxygen_mgr->ScriptDependency(loader, loading);
	}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 349 "scan.l"
{
	const char* file = skip_whitespace(brotext + 10);
	string path = find_relative_file(file, "sig");
	int rc = PLUGIN_HOOK_WITH_RESULT(HOOK_LOAD_FILE, HookLoadFile(plugin::Plugin::SIGNATURES, file, path), -1);

	switch ( rc ) {
	case -1:
		// No plugin in charge of this file.
		if ( path.empty() )
			reporter->Error("failed to find file associated with @load-sigs %s",
			                file);
		else
			sig_files.push_back(copy_string(path.c_str()));
		break;

	case 0:
		if ( ! reporter->Errors() )
			reporter->Error("Plugin reported error loading signatures %s", file);

		exit(1);
		break;

	case 1:
		// A plugin took care of it, just skip.
		break;

	default:
		assert(false);
		break;
	}
	}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 381 "scan.l"
{
	const char* plugin = skip_whitespace(brotext + 12);
	int rc = PLUGIN_HOOK_WITH_RESULT(HOOK_LOAD_FILE, HookLoadFile(plugin::Plugin::PLUGIN, plugin, ""), -1);

	switch ( rc ) {
	case -1:
		// No plugin in charge of this file.
		plugin_mgr->ActivateDynamicPlugin(plugin);
		break;

	case 0:
		if ( ! reporter->Errors() )
			reporter->Error("Plugin reported error loading plugin %s", plugin);

		exit(1);
		break;

	case 1:
		// A plugin took care of it, just skip.
		break;

	default:
		assert(false);
		break;
	}
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 408 "scan.l"
{
	// Skip "@unload".
	const char* file = skip_whitespace(brotext + 7);
	string path = find_relative_file(file, "bro");

	if ( path.empty() )
		reporter->Error("failed find file associated with @unload %s", file);
	else
		{
		// All we have to do is pretend we've already scanned it.
		ScannedFile sf(get_inode_num(path), file_stack.length(), path, true);
		files_scanned.push_back(sf);
		}
	}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 423 "scan.l"
{
	char* pref = skip_whitespace(brotext + 9);	// Skip "@prefixes".

	int append = 0;
	if ( *pref == '+' )
		{
		append = 1;
		++pref;
		}

	pref = skip_whitespace(pref + 1);	// Skip over '='.

	if ( ! append )
		while ( prefixes.length() > 1 )	// don't delete "" prefix
			delete prefixes.remove_nth(1);

	add_to_name_list(pref, ':', prefixes);
	}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 442 "scan.l"
return TOK_ATIF;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 443 "scan.l"
return TOK_ATIFDEF;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 444 "scan.l"
return TOK_ATIFNDEF;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 445 "scan.l"
return TOK_ATELSE;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 446 "scan.l"
--current_depth;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 448 "scan.l"
++current_depth;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 449 "scan.l"
++current_depth;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 450 "scan.l"
++current_depth;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 451 "scan.l"
return TOK_ATELSE;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 452 "scan.l"
return TOK_ATENDIF;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 453 "scan.l"
/* eat */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 454 "scan.l"
/* eat */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 456 "scan.l"
RET_CONST(new Val(true, TYPE_BOOL))
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 457 "scan.l"
RET_CONST(new Val(false, TYPE_BOOL))
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 459 "scan.l"
{
	yylval.str = copy_string(brotext);
	last_id_tok = yylval.str;
	return TOK_ID;
	}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 465 "scan.l"
{
		RET_CONST(new Val(static_cast<bro_uint_t>(strtoull(brotext, (char**) NULL, 10)),
			  TYPE_COUNT))
		}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 469 "scan.l"
RET_CONST(new Val(atof(brotext), TYPE_DOUBLE))
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 471 "scan.l"
{
		uint32 p = atoi(brotext);
		if ( p > 65535 )
			{
			reporter->Error("bad port number - %s", brotext);
			p = 0;
			}
		RET_CONST(port_mgr->Get(p, TRANSPORT_TCP))
		}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 480 "scan.l"
{
		uint32 p = atoi(brotext);
		if ( p > 65535 )
			{
			reporter->Error("bad port number - %s", brotext);
			p = 0;
			}
		RET_CONST(port_mgr->Get(p, TRANSPORT_UDP))
		}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 489 "scan.l"
{
		uint32 p = atoi(brotext);
		if ( p > 255 )
			{
			reporter->Error("bad port number - %s", brotext);
			p = 0;
			}
		RET_CONST(port_mgr->Get(p, TRANSPORT_ICMP))
		}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 498 "scan.l"
{
		uint32 p = atoi(brotext);
		if ( p > 255 )
			{
			reporter->Error("bad port number - %s", brotext);
			p = 0;
			}
		RET_CONST(port_mgr->Get(p, TRANSPORT_UNKNOWN))
		}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 508 "scan.l"
RET_CONST(new IntervalVal(atof(brotext),Days))
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 509 "scan.l"
RET_CONST(new IntervalVal(atof(brotext),Hours))
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 510 "scan.l"
RET_CONST(new IntervalVal(atof(brotext),Minutes))
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 511 "scan.l"
RET_CONST(new IntervalVal(atof(brotext),Seconds))
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 512 "scan.l"
RET_CONST(new IntervalVal(atof(brotext),Milliseconds))
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 513 "scan.l"
RET_CONST(new IntervalVal(atof(brotext),Microseconds))
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 515 "scan.l"
RET_CONST(new Val(static_cast<bro_uint_t>(strtoull(brotext, 0, 16)), TYPE_COUNT))
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 517 "scan.l"
RET_CONST(dns_mgr->LookupHost(brotext))
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 519 "scan.l"
{
	const char* text = brotext;
	int len = strlen(text) + 1;
	int i = 0;

	char* s = new char[len];

	// Skip leading quote.
	for ( ++text; *text; ++text )
		{
		if ( *text == '\\' )
			{
			++text;	// skip '\'
			s[i++] = expand_escape(text);
			--text;	// point to end of sequence
			}
		else
			{
			s[i++] = *text;
			if ( i >= len )
				reporter->InternalError("bad string length computation");
			}
		}

	// Get rid of trailing quote.
	if ( s[i-1] != '"' )
		reporter->InternalError("string scanning confused");

	s[i-1] = '\0';

	RET_CONST(new StringVal(new BroString(1, (byte_vec) s, i-1)))
	}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 552 "scan.l"
{
	yylval.str = copy_string(brotext);
	return TOK_PATTERN_TEXT;
	}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 557 "scan.l"
return brotext[0];
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 559 "scan.l"
reporter->Error("unrecognized character - %s", brotext);
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(RE):
case YY_STATE_EOF(IGNORE):
#line 561 "scan.l"
last_tok[0] = '\0'; return EOF;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 563 "scan.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2631 "/home/ubuntu/bro/my_build_dir/src/scan.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed broin at a new source and called
			 * brolex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = broin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( browrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * brotext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of brolex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					brorealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			brorestart(broin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) brorealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 759 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 759 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 758);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					brorestart(broin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( browrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve brotext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void brorestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        broensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            bro_create_buffer(broin,YY_BUF_SIZE );
	}

	bro_init_buffer(YY_CURRENT_BUFFER,input_file );
	bro_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void bro_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		bropop_buffer_state();
	 *		bropush_buffer_state(new_buffer);
     */
	broensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	bro_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (browrap()) processing, but the only time this flag
	 * is looked at is after browrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void bro_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	broin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE bro_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) broalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in bro_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) broalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in bro_create_buffer()" );

	b->yy_is_our_buffer = 1;

	bro_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with bro_create_buffer()
 * 
 */
    void bro_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		brofree((void *) b->yy_ch_buf  );

	brofree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a brorestart() or at EOF.
 */
    static void bro_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	bro_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then bro_init_buffer was _probably_
     * called from brorestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void bro_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		bro_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void bropush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	broensure_buffer_stack();

	/* This block is copied from bro_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from bro_switch_to_buffer. */
	bro_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void bropop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	bro_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		bro_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void broensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)broalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in broensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)brorealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in broensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE bro_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) broalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in bro_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	bro_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to brolex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       bro_scan_bytes() instead.
 */
YY_BUFFER_STATE bro_scan_string (yyconst char * yystr )
{
    
	return bro_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to brolex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE bro_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) broalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in bro_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = bro_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in bro_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up brotext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		brotext[broleng] = (yy_hold_char); \
		(yy_c_buf_p) = brotext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		broleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int broget_lineno  (void)
{
        
    return brolineno;
}

/** Get the input stream.
 * 
 */
FILE *broget_in  (void)
{
        return broin;
}

/** Get the output stream.
 * 
 */
FILE *broget_out  (void)
{
        return broout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t broget_leng  (void)
{
        return broleng;
}

/** Get the current token.
 * 
 */

char *broget_text  (void)
{
        return brotext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void broset_lineno (int  _line_number )
{
    
    brolineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see bro_switch_to_buffer
 */
void broset_in (FILE *  _in_str )
{
        broin = _in_str ;
}

void broset_out (FILE *  _out_str )
{
        broout = _out_str ;
}

int broget_debug  (void)
{
        return bro_flex_debug;
}

void broset_debug (int  _bdebug )
{
        bro_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from brolex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    broin = stdin;
    broout = stdout;
#else
    broin = (FILE *) 0;
    broout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * brolex_init()
     */
    return 0;
}

/* brolex_destroy is for both reentrant and non-reentrant scanners. */
int brolex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		bro_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		bropop_buffer_state();
	}

	/* Destroy the stack itself. */
	brofree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * brolex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *broalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *brorealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void brofree (void * ptr )
{
			free( (char *) ptr );	/* see brorealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 563 "scan.l"



YYLTYPE GetCurrentLocation()
	{
	static YYLTYPE currloc;

	currloc.filename = filename;
	currloc.first_line = currloc.last_line = line_number;

	return currloc;
	}


static bool already_scanned(ino_t i)
	{
	list<ScannedFile>::const_iterator it;

	for ( it = files_scanned.begin(); it != files_scanned.end(); ++it )
		if ( it->inode == i )
			return true;

	return false;
	}

static bool already_scanned(const string& path)
	{
	return already_scanned(get_inode_num(path));
	}

static int load_files(const char* orig_file)
	{
	string file_path = find_relative_file(orig_file, "bro");
	int rc = PLUGIN_HOOK_WITH_RESULT(HOOK_LOAD_FILE, HookLoadFile(plugin::Plugin::SCRIPT, orig_file, file_path), -1);

	if ( rc == 1 )
		return 0; // A plugin took care of it, just skip.

	if ( rc == 0 )
		{
		if ( ! reporter->Errors() )
			// This is just in case the plugin failed to report
			// the error itself, in which case we want to at
			// least tell the user that something went wrong.
			reporter->Error("Plugin reported error loading %s", orig_file);

		exit(1);
		}

	assert(rc == -1); // No plugin in charge of this file.

	// Whether we pushed on a FileInfo that will restore the
	// current module after the final file has been scanned.
	bool did_module_restore = false;
	FILE* f = 0;

	if ( streq(orig_file, "-") )
		{
		f = stdin;
		file_path = "<stdin>";

		if ( g_policy_debug )
			{
			debug_msg("Warning: can't use debugger while reading policy from stdin; turning off debugging.\n");
			g_policy_debug = false;
			}
		}

	else
		{
		if ( file_path.empty() )
			reporter->FatalError("can't find %s", orig_file);

		if ( is_dir(file_path.c_str()) )
			f = open_package(file_path);
		else
			f = open_file(file_path);

		if ( ! f )
			reporter->FatalError("can't open %s", file_path.c_str());
		}

	ino_t i = get_inode_num(f, file_path);

	if ( already_scanned(i) )
		{
		if ( f != stdin )
			fclose(f);

		return 0;
		}

	ScannedFile sf(i, file_stack.length(), file_path);
	files_scanned.push_back(sf);

	if ( g_policy_debug && ! file_path.empty() )
		{
		// Add the filename to the file mapping table (Debug.h).
		Filemap* map = new Filemap;
		HashKey* key = new HashKey(file_path.c_str());
		g_dbgfilemaps.Insert(key, map);
		LoadPolicyFileText(file_path.c_str());
		}

	// Remember where we were.  If this is the first
	// file being pushed on the stack, i.e., the *last*
	// one that will be processed, then we want to
	// restore the module scope in which this @load
	// was done when we're finished processing it.
	if ( ! did_module_restore )
		{
		file_stack.append(new FileInfo(current_module));
		did_module_restore = true;
		}
	else
		file_stack.append(new FileInfo);

	broxygen_mgr->Script(file_path);

	DBG_LOG(DBG_SCRIPTS, "Loading %s", file_path.c_str());

	// "orig_file", could be an alias for brotext, which is ephemeral
	//  and will be zapped after the bro_switch_to_buffer() below.
	bro_switch_to_buffer(bro_create_buffer(f,YY_BUF_SIZE));

	yylloc.first_line = yylloc.last_line = line_number = 1;

	// Don't delete the old filename - it's pointed to by
	// every BroObj created when parsing it.
	yylloc.filename = filename = copy_string(file_path.c_str());

	return 1;
	}

void begin_RE()
	{
	BEGIN(RE);
	}

void end_RE()
	{
	BEGIN(INITIAL);
	}

class LocalNameFinder : public TraversalCallback {
public:
	LocalNameFinder()
		{}

	virtual TraversalCode PreExpr(const Expr* expr)
		{
		if ( expr->Tag() != EXPR_NAME )
			return TC_CONTINUE;

		const NameExpr* name_expr = static_cast<const NameExpr*>(expr);

		if ( name_expr->Id()->IsGlobal() )
			return TC_CONTINUE;

		local_names.push_back(name_expr);
		return TC_CONTINUE;
		}

	std::vector<const NameExpr*> local_names;
};

void do_atif(Expr* expr)
	{
	++current_depth;

	LocalNameFinder cb;
	expr->Traverse(&cb);
	Val* val = 0;

	if ( cb.local_names.empty() )
		val = expr->Eval(0);
	else
		{
		for ( size_t i = 0; i < cb.local_names.size(); ++i )
			cb.local_names[i]->Error("referencing a local name in @if");
		}

	if ( ! val )
		{
		expr->Error("invalid expression in @if");
		return;
		}

	if ( ! val->AsBool() )
		{
		if_stack.append(current_depth);
		BEGIN(IGNORE);
		}
	}

void do_atifdef(const char* id)
	{
	++current_depth;

	ID* i;

	if ( ! (i = lookup_ID(id, current_module.c_str())) )
		{
		if_stack.append(current_depth);
		BEGIN(IGNORE);
		}

	Unref(i);
	}

void do_atifndef(const char *id)
	{
	++current_depth;

	ID* i;

	if ( (i = lookup_ID(id, current_module.c_str())) )
		{
		if_stack.append(current_depth);
		BEGIN(IGNORE);
		}

	Unref(i);
	}

void do_atelse()
	{
	if ( current_depth == 0 )
		reporter->Error("@else without @if...");

	if ( if_stack.length() && current_depth > if_stack.last() )
		return;

	if ( YY_START == INITIAL )
		{
		if_stack.append(current_depth);
		BEGIN(IGNORE);
		}
	else
		{
		if_stack.get();
		BEGIN(INITIAL);
		}
	}

void do_atendif()
	{
	if ( current_depth == 0 )
		reporter->Error("unbalanced @if... @endif");

	if ( current_depth == if_stack.last() )
		{
		BEGIN(INITIAL);
		if_stack.get();
		}

	--current_depth;
	}

// Be careful to never delete things from this list, as the strings
// are referred to (in order to save the locations of tokens and statements,
// for error reporting and debugging).
static name_list input_files;

void add_input_file(const char* file)
	{
	if ( ! file )
		reporter->InternalError("empty filename");

	if ( ! filename )
		(void) load_files(file);
	else
		input_files.append(copy_string(file));
	}

void add_input_file_at_front(const char* file)
	{
	if ( ! file )
		reporter->InternalError("empty filename");

	if ( ! filename )
		(void) load_files(file);
	else
		input_files.insert(copy_string(file));
	}

void add_to_name_list(char* s, char delim, name_list& nl)
	{
	while ( s )
		{
		char* s_delim = strchr(s, delim);
		if ( s_delim )
			*s_delim = 0;

		nl.append(copy_string(s));

		if ( s_delim )
			s = s_delim + 1;
		else
			break;
		}
	}

int browrap()
	{
	if ( reporter->Errors() > 0 )
		return 1;

	if ( ! did_builtin_init && file_stack.length() == 1 )
		{
		// ### This is a gross hack - we know that the first file
		// we parse is bro.init, and after it it's safe to initialize
		// the built-ins.  Furthermore, we want to initialize the
		// built-in's *right* after parsing bro.init, so that other
		// source files can use built-in's when initializing globals.
		init_builtin_funcs();
		}

	bro_delete_buffer(YY_CURRENT_BUFFER);

	delete file_stack.remove_nth(file_stack.length() - 1);

	if ( YY_CURRENT_BUFFER )
		// There's more on the stack to scan.
		return 0;

	// Stack is now empty.
	while ( input_files.length() > 0 )
		{
		if ( load_files(input_files[0]) )
			{
			// Don't delete the filename - it's pointed to by
			// every BroObj created when parsing it.
			(void) input_files.remove_nth(0);
			return 0;
			}

		// We already scanned the file.  Pop it and try the next,
		// if any.
		(void) input_files.remove_nth(0);
		}

	// For each file scanned so far, and for each @prefix, look for a
	// prefixed and flattened version of the loaded file in BROPATH. The
	// flattening involves taking the path in BROPATH in which the
	// scanned file lives and replacing '/' path separators with a '.' If
	// the scanned file is "__load__.bro", that part of the flattened
	// file name is discarded. If the prefix is non-empty, it gets placed
	// in front of the flattened path, separated with another '.'
	std::list<ScannedFile>::iterator it;
	bool found_prefixed_files = false;
	for ( it = files_scanned.begin(); it != files_scanned.end(); ++it )
		{
		if ( it->skipped || it->prefixes_checked )
			continue;

		it->prefixes_checked = true;
		// Prefixes are pushed onto a stack, so iterate backwards.
		for ( int i = prefixes.length() - 1; i >= 0; --i )
			{
			// Don't look at empty prefixes.
			if ( ! prefixes[i][0] )
				continue;

			string canon = without_bropath_component(it->name);
			string flat = flatten_script_name(canon, prefixes[i]);
			string path = find_relative_file(flat, "bro");

			if ( ! path.empty() )
				{
				add_input_file(path.c_str());
				found_prefixed_files = true;
				}

			//printf("====== prefix search ======\n");
			//printf("File  : %s\n", it->name.c_str());
			//printf("Canon : %s\n", canon.c_str());
			//printf("Flat  : %s\n", flat.c_str());
			//printf("Found : %s\n", path.empty() ? "F" : "T");
			//printf("===========================\n");
			}
		}

	if ( found_prefixed_files )
		return 0;

	// Add redef statements for any X=Y command line parameters.
	if ( params.size() > 0 )
		{
		string policy;

		for ( unsigned int i = 0; i < params.size(); ++i )
			{
			char* param = copy_string(params[i].c_str());
			char* eq = strchr(param, '=');
			char* val = eq + 1;

			*eq = '\0';

			if ( strlen(val) == 0 )
				{
				delete [] param;
				continue;
				}

			// Try to find the type of the param, and interpret
			// the value intelligently for that type.  (So far,
			// that just means quoting the value if it's a
			// string type.)  If no type is found, the value
			// is left unchanged.
			string opt_quote;	// no optional quote by default
			Val* v = opt_internal_val(param);

			if ( v && v->Type() && v->Type()->Tag() == TYPE_STRING )
				opt_quote = "\"";	// use quotes

			policy += string("redef ") + param + "="
					+ opt_quote + val + opt_quote + ";";

			delete [] param;
			}

		params.clear();
		yylloc.filename = filename = "<params>";
		bro_scan_string(policy.c_str());
		return 0;
		}

	// If we got this far, then we ran out of files. Check if the user
	// specified additional code on the command line, if so, parse it.
	// Use a synthetic filename, and add an extra semicolon on its own
	// line (so that things like @load work), so that a semicolon is
	// not strictly necessary.
	if ( command_line_policy )
		{
		int tmp_len = strlen(command_line_policy) + 32;
		char* tmp = new char[tmp_len];
		snprintf(tmp, tmp_len, "%s\n;\n", command_line_policy);
		yylloc.filename = filename = "<command line>";

		bro_scan_string(tmp);
		delete [] tmp;

		// Make sure we do not get here again:
		command_line_policy = 0;

		return 0;
		}

	// Otherwise, we are done.
	return 1;
	}

FileInfo::FileInfo(string arg_restore_module)
	{
	buffer_state = YY_CURRENT_BUFFER;
	restore_module = arg_restore_module;
	name = ::filename;
	line = ::line_number;
	}

FileInfo::~FileInfo()
	{
	if ( broin && broin != stdin )
		fclose(broin);

	bro_switch_to_buffer(buffer_state);
	yylloc.filename = filename = name;
	yylloc.first_line = yylloc.last_line = line_number = line;

	if ( restore_module != "" )
		current_module = restore_module;
	}

