// This file was automatically generated by bifcl from /home/ubuntu/bro/src/file_analysis/file_analysis.bif (alternative mode).

#if defined(BRO_IN_NETVAR) || ! defined(_home_ubuntu_bro_my_build_dir_src_file_analysis_file_analysis_bif)
#ifndef BRO_IN_NETVAR
#ifndef _home_ubuntu_bro_my_build_dir_src_file_analysis_file_analysis_bif
#define _home_ubuntu_bro_my_build_dir_src_file_analysis_file_analysis_bif
#include "bro-bif.h"
#endif
#endif

namespace BifType { namespace Record{ namespace Files {  extern RecordType * AnalyzerArgs;  } } }
namespace BifFunc { namespace Files { extern Val* bro___set_timeout_interval(Frame* frame, val_list*); }  }
namespace BifFunc { namespace Files { extern Val* bro___enable_reassembly(Frame* frame, val_list*); }  }
namespace BifFunc { namespace Files { extern Val* bro___disable_reassembly(Frame* frame, val_list*); }  }
namespace BifFunc { namespace Files { extern Val* bro___set_reassembly_buffer(Frame* frame, val_list*); }  }
namespace BifFunc { namespace Files { extern Val* bro___add_analyzer(Frame* frame, val_list*); }  }
namespace BifFunc { namespace Files { extern Val* bro___remove_analyzer(Frame* frame, val_list*); }  }
namespace BifFunc { namespace Files { extern Val* bro___stop(Frame* frame, val_list*); }  }
namespace BifFunc { namespace Files { extern Val* bro___analyzer_name(Frame* frame, val_list*); }  }
namespace BifFunc { namespace Files { extern Val* bro___file_exists(Frame* frame, val_list*); }  }
namespace BifFunc { namespace Files { extern Val* bro___lookup_file(Frame* frame, val_list*); }  }
namespace BifFunc { extern Val* bro_set_file_handle(Frame* frame, val_list*); } 
namespace BifConst { namespace Files {  extern StringVal* salt;  }  }

#endif
