// This file was automatically generated by bifcl from /home/ubuntu/bro/src/file_analysis/analyzer/pe/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr pe_dos_header; 
void BifEvent::generate_pe_dos_header(analyzer::Analyzer* analyzer, Val* f, Val* h)
	{
	// Note that it is intentional that here we do not
	// check if ::pe_dos_header is NULL, which should happen *before*
	// BifEvent::generate_pe_dos_header is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(f);
	vl->append(h);

	mgr.QueueEvent(::pe_dos_header, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
EventHandlerPtr pe_dos_code; 
void BifEvent::generate_pe_dos_code(analyzer::Analyzer* analyzer, Val* f, StringVal* code)
	{
	// Note that it is intentional that here we do not
	// check if ::pe_dos_code is NULL, which should happen *before*
	// BifEvent::generate_pe_dos_code is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(f);
	vl->append(code);

	mgr.QueueEvent(::pe_dos_code, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
EventHandlerPtr pe_file_header; 
void BifEvent::generate_pe_file_header(analyzer::Analyzer* analyzer, Val* f, Val* h)
	{
	// Note that it is intentional that here we do not
	// check if ::pe_file_header is NULL, which should happen *before*
	// BifEvent::generate_pe_file_header is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(f);
	vl->append(h);

	mgr.QueueEvent(::pe_file_header, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
EventHandlerPtr pe_optional_header; 
void BifEvent::generate_pe_optional_header(analyzer::Analyzer* analyzer, Val* f, Val* h)
	{
	// Note that it is intentional that here we do not
	// check if ::pe_optional_header is NULL, which should happen *before*
	// BifEvent::generate_pe_optional_header is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(f);
	vl->append(h);

	mgr.QueueEvent(::pe_optional_header, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
EventHandlerPtr pe_section_header; 
void BifEvent::generate_pe_section_header(analyzer::Analyzer* analyzer, Val* f, Val* h)
	{
	// Note that it is intentional that here we do not
	// check if ::pe_section_header is NULL, which should happen *before*
	// BifEvent::generate_pe_section_header is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(f);
	vl->append(h);

	mgr.QueueEvent(::pe_section_header, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr);
	} // event generation
