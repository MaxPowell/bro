// This file was automatically generated by bifcl from /home/ubuntu/bro/src/file_analysis/analyzer/x509/ocsp_events.bif (plugin mode).

#if defined(BRO_IN_NETVAR) || ! defined(_home_ubuntu_bro_my_build_dir_src_file_analysis_analyzer_x509_ocsp_events_bif)
#ifndef BRO_IN_NETVAR
#ifndef _home_ubuntu_bro_my_build_dir_src_file_analysis_analyzer_x509_ocsp_events_bif
#define _home_ubuntu_bro_my_build_dir_src_file_analysis_analyzer_x509_ocsp_events_bif
#include "bro-bif.h"
#endif
#endif

extern EventHandlerPtr ocsp_request; 
namespace BifEvent {  void generate_ocsp_request(analyzer::Analyzer* analyzer, Val* f, bro_uint_t version, StringVal* requestorName);  } 
extern EventHandlerPtr ocsp_request_certificate; 
namespace BifEvent {  void generate_ocsp_request_certificate(analyzer::Analyzer* analyzer, Val* f, StringVal* hashAlgorithm, StringVal* issuerNameHash, StringVal* issuerKeyHash, StringVal* serialNumber);  } 
extern EventHandlerPtr ocsp_response_status; 
namespace BifEvent {  void generate_ocsp_response_status(analyzer::Analyzer* analyzer, Val* f, StringVal* status);  } 
extern EventHandlerPtr ocsp_response_bytes; 
namespace BifEvent {  void generate_ocsp_response_bytes(analyzer::Analyzer* analyzer, Val* f, Val* resp_ref, StringVal* status, bro_uint_t version, StringVal* responderId, double producedAt, StringVal* signatureAlgorithm, Val* certs);  } 
extern EventHandlerPtr ocsp_response_certificate; 
namespace BifEvent {  void generate_ocsp_response_certificate(analyzer::Analyzer* analyzer, Val* f, StringVal* hashAlgorithm, StringVal* issuerNameHash, StringVal* issuerKeyHash, StringVal* serialNumber, StringVal* certStatus, double revokeTime, StringVal* revokeReason, double thisUpdate, double nextUpdate);  } 
extern EventHandlerPtr ocsp_extension; 
namespace BifEvent {  void generate_ocsp_extension(analyzer::Analyzer* analyzer, Val* f, Val* ext, int global_resp);  } 

#endif
