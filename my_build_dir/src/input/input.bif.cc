// This file was automatically generated by bifcl from /home/ubuntu/bro/src/input/input.bif (alternative mode).


#include "input.bif.h"


#line 5 "input.bif"

#include "input/Manager.h"
namespace BifType { namespace Enum{ namespace Input {  EnumType * Event;  } } }
namespace BifType { namespace Record{ namespace Input {  RecordType * TableDescription;  } } }
namespace BifType { namespace Record{ namespace Input {  RecordType * EventDescription;  } } }
namespace BifType { namespace Record{ namespace Input {  RecordType * AnalysisDescription;  } } }

#line 19 "input.bif"
Val* BifFunc::Input::bro___create_table_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 20 "input.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Input::__create_table_stream() takes exactly 1 argument(s)");
		return 0;
		}
	Val* description = (Val*) ((*BiF_ARGS)[0]);

#line 20 "input.bif"

	bool res = input_mgr->CreateTableStream(description->AsRecordVal());
	return new Val(res, TYPE_BOOL);
	} // end of BifFunc::Input::bro___create_table_stream

#line 23 "input.bif"

#line 25 "input.bif"
Val* BifFunc::Input::bro___create_event_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 26 "input.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Input::__create_event_stream() takes exactly 1 argument(s)");
		return 0;
		}
	Val* description = (Val*) ((*BiF_ARGS)[0]);

#line 26 "input.bif"

	bool res = input_mgr->CreateEventStream(description->AsRecordVal());
	return new Val(res, TYPE_BOOL);
	} // end of BifFunc::Input::bro___create_event_stream

#line 29 "input.bif"

#line 31 "input.bif"
Val* BifFunc::Input::bro___create_analysis_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 32 "input.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Input::__create_analysis_stream() takes exactly 1 argument(s)");
		return 0;
		}
	Val* description = (Val*) ((*BiF_ARGS)[0]);

#line 32 "input.bif"

	bool res = input_mgr->CreateAnalysisStream(description->AsRecordVal());
	return new Val(res, TYPE_BOOL);
	} // end of BifFunc::Input::bro___create_analysis_stream

#line 35 "input.bif"

#line 37 "input.bif"
Val* BifFunc::Input::bro___remove_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 38 "input.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Input::__remove_stream() takes exactly 1 argument(s)");
		return 0;
		}
	StringVal* id = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());

#line 38 "input.bif"

	bool res = input_mgr->RemoveStream(id->AsString()->CheckString());
	return new Val(res, TYPE_BOOL);
	} // end of BifFunc::Input::bro___remove_stream

#line 41 "input.bif"

#line 43 "input.bif"
Val* BifFunc::Input::bro___force_update(Frame* frame, val_list* BiF_ARGS) 
	
#line 44 "input.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Input::__force_update() takes exactly 1 argument(s)");
		return 0;
		}
	StringVal* id = (StringVal*) ((*BiF_ARGS)[0]->AsStringVal());

#line 44 "input.bif"

	bool res = input_mgr->ForceUpdate(id->AsString()->CheckString());
	return new Val(res, TYPE_BOOL);
	} // end of BifFunc::Input::bro___force_update

#line 47 "input.bif"
namespace BifConst { namespace Input {  int accept_unsupported_types;  }  }
