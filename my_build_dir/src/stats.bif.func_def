// This file was automatically generated by bifcl from stats.bif.


#line 2 "stats.bif"
 // C segment
#include "util.h"
#include "threading/Manager.h"

RecordType* ProcStats;
RecordType* NetStats;
RecordType* MatcherStats;
RecordType* ReassemblerStats;
RecordType* DNSStats;
RecordType* ConnStats;
RecordType* GapStats;
RecordType* EventStats;
RecordType* ThreadStats;
RecordType* TimerStats;
RecordType* FileAnalysisStats;

#line 35 "stats.bif"
Val* BifFunc::bro_get_net_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 36 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_net_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 36 "stats.bif"

	uint64 recv = 0;
	uint64 drop = 0;
	uint64 link = 0;
	uint64 bytes_recv = 0;

	const iosource::Manager::PktSrcList& pkt_srcs(iosource_mgr->GetPktSrcs());

	for ( iosource::Manager::PktSrcList::const_iterator i = pkt_srcs.begin();
	      i != pkt_srcs.end(); i++ )
		{
		iosource::PktSrc* ps = *i;

		struct iosource::PktSrc::Stats stat;
		ps->Statistics(&stat);
		recv += stat.received;
		drop += stat.dropped;
		link += stat.link;
		bytes_recv += stat.bytes_received;
		}

	RecordVal* r = new RecordVal(NetStats);
	int n = 0;

	r->Assign(n++, new Val(recv, TYPE_COUNT));
	r->Assign(n++, new Val(drop, TYPE_COUNT));
	r->Assign(n++, new Val(link, TYPE_COUNT));
	r->Assign(n++, new Val(bytes_recv, TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_net_stats

#line 66 "stats.bif"

#line 82 "stats.bif"
Val* BifFunc::bro_get_conn_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 83 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_conn_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 83 "stats.bif"

	RecordVal* r = new RecordVal(ConnStats);
	int n = 0;

	r->Assign(n++, new Val(Connection::TotalConnections(), TYPE_COUNT));
	r->Assign(n++, new Val(Connection::CurrentConnections(), TYPE_COUNT));
	r->Assign(n++, new Val(Connection::CurrentExternalConnections(), TYPE_COUNT));
	r->Assign(n++, new Val(sessions->CurrentConnections(), TYPE_COUNT));

	SessionStats s;
	if ( sessions )
		sessions->GetStats(s);

#define ADD_STAT(x) \
	r->Assign(n++, new Val(unsigned(sessions ? x : 0), TYPE_COUNT));

	ADD_STAT(s.num_packets);
	ADD_STAT(s.num_fragments);
	ADD_STAT(s.max_fragments);
	ADD_STAT(s.num_TCP_conns);
	ADD_STAT(s.max_TCP_conns);
	ADD_STAT(s.cumulative_TCP_conns);
	ADD_STAT(s.num_UDP_conns);
	ADD_STAT(s.max_UDP_conns);
	ADD_STAT(s.cumulative_UDP_conns);
	ADD_STAT(s.num_ICMP_conns);
	ADD_STAT(s.max_ICMP_conns);
	ADD_STAT(s.cumulative_ICMP_conns);

	r->Assign(n++, new Val(killed_by_inactivity, TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_conn_stats

#line 115 "stats.bif"

#line 131 "stats.bif"
Val* BifFunc::bro_get_proc_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 132 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_proc_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 132 "stats.bif"

	struct rusage ru;
	if ( getrusage(RUSAGE_SELF, &ru) < 0 )
		reporter->InternalError("getrusage() failed in get_proc_stats()");

	RecordVal* r = new RecordVal(ProcStats);
	int n = 0;

	double elapsed_time = current_time() - bro_start_time;
	double user_time =
		double(ru.ru_utime.tv_sec) + double(ru.ru_utime.tv_usec) / 1e6;
	double system_time =
		double(ru.ru_stime.tv_sec) + double(ru.ru_stime.tv_usec) / 1e6;

#ifdef DEBUG
	r->Assign(n++, new Val(1, TYPE_COUNT));
#else
	r->Assign(n++, new Val(0, TYPE_COUNT));
#endif

	r->Assign(n++, new Val(bro_start_time, TYPE_TIME));

	r->Assign(n++, new IntervalVal(elapsed_time, Seconds));
	r->Assign(n++, new IntervalVal(user_time, Seconds));
	r->Assign(n++, new IntervalVal(system_time, Seconds));

	uint64 total_mem;
	get_memory_usage(&total_mem, NULL);
	r->Assign(n++, new Val(unsigned(total_mem), TYPE_COUNT));

	r->Assign(n++, new Val(unsigned(ru.ru_minflt), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(ru.ru_majflt), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(ru.ru_nswap), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(ru.ru_inblock), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(ru.ru_oublock), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(ru.ru_nivcsw), TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_proc_stats

#line 170 "stats.bif"

#line 186 "stats.bif"
Val* BifFunc::bro_get_event_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 187 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_event_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 187 "stats.bif"

	RecordVal* r = new RecordVal(EventStats);
	int n = 0;

	r->Assign(n++, new Val(num_events_queued, TYPE_COUNT));
	r->Assign(n++, new Val(num_events_dispatched, TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_event_stats

#line 195 "stats.bif"

#line 211 "stats.bif"
Val* BifFunc::bro_get_reassembler_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 212 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_reassembler_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 212 "stats.bif"

	RecordVal* r = new RecordVal(ReassemblerStats);
	int n = 0;

	r->Assign(n++, new Val(Reassembler::MemoryAllocation(REASSEM_FILE), TYPE_COUNT));
	r->Assign(n++, new Val(Reassembler::MemoryAllocation(REASSEM_FRAG), TYPE_COUNT));
	r->Assign(n++, new Val(Reassembler::MemoryAllocation(REASSEM_TCP), TYPE_COUNT));
	r->Assign(n++, new Val(Reassembler::MemoryAllocation(REASSEM_UNKNOWN), TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_reassembler_stats

#line 222 "stats.bif"

#line 238 "stats.bif"
Val* BifFunc::bro_get_dns_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 239 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_dns_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 239 "stats.bif"

	RecordVal* r = new RecordVal(DNSStats);
	int n = 0;

	DNS_Mgr::Stats dstats;
	dns_mgr->GetStats(&dstats);

	r->Assign(n++, new Val(unsigned(dstats.requests), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(dstats.successful), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(dstats.failed), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(dstats.pending), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(dstats.cached_hosts), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(dstats.cached_addresses), TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_dns_stats

#line 254 "stats.bif"

#line 270 "stats.bif"
Val* BifFunc::bro_get_timer_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 271 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_timer_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 271 "stats.bif"

	RecordVal* r = new RecordVal(TimerStats);
	int n = 0;

	r->Assign(n++, new Val(unsigned(timer_mgr->Size()), TYPE_COUNT));
	r->Assign(n++, new Val(unsigned(timer_mgr->PeakSize()), TYPE_COUNT));
	r->Assign(n++, new Val(timer_mgr->CumulativeNum(), TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_timer_stats

#line 280 "stats.bif"

#line 296 "stats.bif"
Val* BifFunc::bro_get_file_analysis_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 297 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_file_analysis_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 297 "stats.bif"

	RecordVal* r = new RecordVal(FileAnalysisStats);
	int n = 0;

	r->Assign(n++, new Val(file_mgr->CurrentFiles(), TYPE_COUNT));
	r->Assign(n++, new Val(file_mgr->MaxFiles(), TYPE_COUNT));
	r->Assign(n++, new Val(file_mgr->CumulativeFiles(), TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_file_analysis_stats

#line 306 "stats.bif"

#line 322 "stats.bif"
Val* BifFunc::bro_get_thread_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 323 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_thread_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 323 "stats.bif"

	RecordVal* r = new RecordVal(ThreadStats);
	int n = 0;

	r->Assign(n++, new Val(thread_mgr->NumThreads(), TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_thread_stats

#line 330 "stats.bif"

#line 346 "stats.bif"
Val* BifFunc::bro_get_gap_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 347 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_gap_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 347 "stats.bif"

	RecordVal* r = new RecordVal(GapStats);
	int n = 0;

	r->Assign(n++, new Val(tot_ack_events, TYPE_COUNT));
	r->Assign(n++, new Val(tot_ack_bytes, TYPE_COUNT));
	r->Assign(n++, new Val(tot_gap_events, TYPE_COUNT));
	r->Assign(n++, new Val(tot_gap_bytes, TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_gap_stats

#line 357 "stats.bif"

#line 376 "stats.bif"
Val* BifFunc::bro_get_matcher_stats(Frame* frame, val_list* BiF_ARGS)
	
#line 377 "stats.bif"
{
	if ( BiF_ARGS->length() != 0 )
		{
		reporter->Error("get_matcher_stats() takes exactly 0 argument(s)");
		return 0;
		}

#line 377 "stats.bif"

	RecordVal* r = new RecordVal(MatcherStats);
	int n = 0;

	RuleMatcher::Stats s;
	memset(&s, 0, sizeof(s));
	if ( rule_matcher )
		rule_matcher->GetStats(&s);

	r->Assign(n++, new Val(s.matchers, TYPE_COUNT));
	r->Assign(n++, new Val(s.nfa_states, TYPE_COUNT));
	r->Assign(n++, new Val(s.dfa_states, TYPE_COUNT));
	r->Assign(n++, new Val(s.computed, TYPE_COUNT));
	r->Assign(n++, new Val(s.mem, TYPE_COUNT));
	r->Assign(n++, new Val(s.hits, TYPE_COUNT));
	r->Assign(n++, new Val(s.misses, TYPE_COUNT));

	return r;
	} // end of BifFunc::bro_get_matcher_stats

#line 395 "stats.bif"
