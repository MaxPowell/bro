// This file was automatically generated by bifcl from /home/ubuntu/bro/src/logging/logging.bif (alternative mode).


#include "logging.bif.h"


#line 5 "logging.bif"

#include "logging/Manager.h"
namespace BifType { namespace Record{ namespace Log {  RecordType * Filter;  } } }
namespace BifType { namespace Record{ namespace Log {  RecordType * Stream;  } } }
namespace BifType { namespace Record{ namespace Log {  RecordType * RotationInfo;  } } }

#line 13 "logging.bif"
Val* BifFunc::Log::bro___create_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 14 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__create_stream() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	Val* stream = (Val*) ((*BiF_ARGS)[1]);

#line 14 "logging.bif"

	bool result = log_mgr->CreateStream(id->AsEnumVal(), stream->AsRecordVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___create_stream

#line 17 "logging.bif"

#line 19 "logging.bif"
Val* BifFunc::Log::bro___remove_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 20 "logging.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Log::__remove_stream() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 20 "logging.bif"

	bool result = log_mgr->RemoveStream(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___remove_stream

#line 23 "logging.bif"

#line 25 "logging.bif"
Val* BifFunc::Log::bro___enable_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 26 "logging.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Log::__enable_stream() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 26 "logging.bif"

	bool result = log_mgr->EnableStream(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___enable_stream

#line 29 "logging.bif"

#line 31 "logging.bif"
Val* BifFunc::Log::bro___disable_stream(Frame* frame, val_list* BiF_ARGS) 
	
#line 32 "logging.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Log::__disable_stream() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 32 "logging.bif"

	bool result = log_mgr->DisableStream(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___disable_stream

#line 35 "logging.bif"

#line 37 "logging.bif"
Val* BifFunc::Log::bro___add_filter(Frame* frame, val_list* BiF_ARGS) 
	
#line 38 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__add_filter() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	Val* filter = (Val*) ((*BiF_ARGS)[1]);

#line 38 "logging.bif"

	bool result = log_mgr->AddFilter(id->AsEnumVal(), filter->AsRecordVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___add_filter

#line 41 "logging.bif"

#line 43 "logging.bif"
Val* BifFunc::Log::bro___remove_filter(Frame* frame, val_list* BiF_ARGS) 
	
#line 44 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__remove_filter() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	StringVal* name = (StringVal*) ((*BiF_ARGS)[1]->AsStringVal());

#line 44 "logging.bif"

	bool result = log_mgr->RemoveFilter(id->AsEnumVal(), name);
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___remove_filter

#line 47 "logging.bif"

#line 49 "logging.bif"
Val* BifFunc::Log::bro___write(Frame* frame, val_list* BiF_ARGS) 
	
#line 50 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__write() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	Val* columns = (Val*) ((*BiF_ARGS)[1]);

#line 50 "logging.bif"

	bool result = log_mgr->Write(id->AsEnumVal(), columns->AsRecordVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___write

#line 53 "logging.bif"

#line 55 "logging.bif"
Val* BifFunc::Log::bro___set_buf(Frame* frame, val_list* BiF_ARGS)
	
#line 56 "logging.bif"
{
	if ( BiF_ARGS->length() != 2 )
		{
		reporter->Error("Log::__set_buf() takes exactly 2 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);
	int buffered = (int) ((*BiF_ARGS)[1]->AsBool());

#line 56 "logging.bif"

	bool result = log_mgr->SetBuf(id->AsEnumVal(), buffered);
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___set_buf

#line 59 "logging.bif"

#line 61 "logging.bif"
Val* BifFunc::Log::bro___flush(Frame* frame, val_list* BiF_ARGS)
	
#line 62 "logging.bif"
{
	if ( BiF_ARGS->length() != 1 )
		{
		reporter->Error("Log::__flush() takes exactly 1 argument(s)");
		return 0;
		}
	Val* id = (Val*) ((*BiF_ARGS)[0]);

#line 62 "logging.bif"

	bool result = log_mgr->Flush(id->AsEnumVal());
	return new Val(result, TYPE_BOOL);
	} // end of BifFunc::Log::bro___flush

#line 65 "logging.bif"
