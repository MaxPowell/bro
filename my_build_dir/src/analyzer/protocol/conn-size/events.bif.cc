// This file was automatically generated by bifcl from /home/ubuntu/bro/src/analyzer/protocol/conn-size/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr conn_bytes_threshold_crossed; 
void BifEvent::generate_conn_bytes_threshold_crossed(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t threshold, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::conn_bytes_threshold_crossed is NULL, which should happen *before*
	// BifEvent::generate_conn_bytes_threshold_crossed is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(threshold, TYPE_COUNT));
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::conn_bytes_threshold_crossed, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr conn_packets_threshold_crossed; 
void BifEvent::generate_conn_packets_threshold_crossed(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t threshold, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::conn_packets_threshold_crossed is NULL, which should happen *before*
	// BifEvent::generate_conn_packets_threshold_crossed is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(threshold, TYPE_COUNT));
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::conn_packets_threshold_crossed, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
