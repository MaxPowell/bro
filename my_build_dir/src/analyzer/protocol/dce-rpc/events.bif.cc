// This file was automatically generated by bifcl from /home/ubuntu/bro/src/analyzer/protocol/dce-rpc/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr dce_rpc_message; 
void BifEvent::generate_dce_rpc_message(analyzer::Analyzer* analyzer, Connection* c, int is_orig, bro_uint_t fid, bro_uint_t ptype_id, Val* ptype)
	{
	// Note that it is intentional that here we do not
	// check if ::dce_rpc_message is NULL, which should happen *before*
	// BifEvent::generate_dce_rpc_message is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(new Val(fid, TYPE_COUNT));
	vl->append(new Val(ptype_id, TYPE_COUNT));
	vl->append(ptype);

	mgr.QueueEvent(::dce_rpc_message, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dce_rpc_bind; 
void BifEvent::generate_dce_rpc_bind(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t fid, StringVal* uuid, bro_uint_t ver_major, bro_uint_t ver_minor)
	{
	// Note that it is intentional that here we do not
	// check if ::dce_rpc_bind is NULL, which should happen *before*
	// BifEvent::generate_dce_rpc_bind is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(fid, TYPE_COUNT));
	vl->append(uuid);
	vl->append(new Val(ver_major, TYPE_COUNT));
	vl->append(new Val(ver_minor, TYPE_COUNT));

	mgr.QueueEvent(::dce_rpc_bind, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dce_rpc_bind_ack; 
void BifEvent::generate_dce_rpc_bind_ack(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t fid, StringVal* sec_addr)
	{
	// Note that it is intentional that here we do not
	// check if ::dce_rpc_bind_ack is NULL, which should happen *before*
	// BifEvent::generate_dce_rpc_bind_ack is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(fid, TYPE_COUNT));
	vl->append(sec_addr);

	mgr.QueueEvent(::dce_rpc_bind_ack, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dce_rpc_request; 
void BifEvent::generate_dce_rpc_request(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t fid, bro_uint_t opnum, bro_uint_t stub_len)
	{
	// Note that it is intentional that here we do not
	// check if ::dce_rpc_request is NULL, which should happen *before*
	// BifEvent::generate_dce_rpc_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(fid, TYPE_COUNT));
	vl->append(new Val(opnum, TYPE_COUNT));
	vl->append(new Val(stub_len, TYPE_COUNT));

	mgr.QueueEvent(::dce_rpc_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr dce_rpc_response; 
void BifEvent::generate_dce_rpc_response(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t fid, bro_uint_t opnum, bro_uint_t stub_len)
	{
	// Note that it is intentional that here we do not
	// check if ::dce_rpc_response is NULL, which should happen *before*
	// BifEvent::generate_dce_rpc_response is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(fid, TYPE_COUNT));
	vl->append(new Val(opnum, TYPE_COUNT));
	vl->append(new Val(stub_len, TYPE_COUNT));

	mgr.QueueEvent(::dce_rpc_response, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
