// This file was automatically generated by bifcl from /home/ubuntu/bro/src/analyzer/protocol/smb/smb1_com_transaction.bif (plugin mode).


#include "smb1_com_transaction.bif.h"

EventHandlerPtr smb1_transaction_request; 
void BifEvent::generate_smb1_transaction_request(analyzer::Analyzer* analyzer, Connection* c, Val* hdr, StringVal* name, bro_uint_t sub_cmd, StringVal* parameters, StringVal* data)
	{
	// Note that it is intentional that here we do not
	// check if ::smb1_transaction_request is NULL, which should happen *before*
	// BifEvent::generate_smb1_transaction_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(hdr);
	vl->append(name);
	vl->append(new Val(sub_cmd, TYPE_COUNT));
	vl->append(parameters);
	vl->append(data);

	mgr.QueueEvent(::smb1_transaction_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr smb1_transaction_response; 
void BifEvent::generate_smb1_transaction_response(analyzer::Analyzer* analyzer, Connection* c, Val* hdr, StringVal* parameters, StringVal* data)
	{
	// Note that it is intentional that here we do not
	// check if ::smb1_transaction_response is NULL, which should happen *before*
	// BifEvent::generate_smb1_transaction_response is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(hdr);
	vl->append(parameters);
	vl->append(data);

	mgr.QueueEvent(::smb1_transaction_response, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
