// This file was automatically generated by bifcl from /home/ubuntu/bro/src/analyzer/protocol/smb/smb1_com_transaction2.bif (plugin mode).


#include "smb1_com_transaction2.bif.h"

EventHandlerPtr smb1_transaction2_request; 
void BifEvent::generate_smb1_transaction2_request(analyzer::Analyzer* analyzer, Connection* c, Val* hdr, Val* args, bro_uint_t sub_cmd)
	{
	// Note that it is intentional that here we do not
	// check if ::smb1_transaction2_request is NULL, which should happen *before*
	// BifEvent::generate_smb1_transaction2_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(hdr);
	vl->append(args);
	vl->append(new Val(sub_cmd, TYPE_COUNT));

	mgr.QueueEvent(::smb1_transaction2_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr smb1_trans2_find_first2_request; 
void BifEvent::generate_smb1_trans2_find_first2_request(analyzer::Analyzer* analyzer, Connection* c, Val* hdr, Val* args)
	{
	// Note that it is intentional that here we do not
	// check if ::smb1_trans2_find_first2_request is NULL, which should happen *before*
	// BifEvent::generate_smb1_trans2_find_first2_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(hdr);
	vl->append(args);

	mgr.QueueEvent(::smb1_trans2_find_first2_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr smb1_trans2_query_path_info_request; 
void BifEvent::generate_smb1_trans2_query_path_info_request(analyzer::Analyzer* analyzer, Connection* c, Val* hdr, StringVal* file_name)
	{
	// Note that it is intentional that here we do not
	// check if ::smb1_trans2_query_path_info_request is NULL, which should happen *before*
	// BifEvent::generate_smb1_trans2_query_path_info_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(hdr);
	vl->append(file_name);

	mgr.QueueEvent(::smb1_trans2_query_path_info_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr smb1_trans2_get_dfs_referral_request; 
void BifEvent::generate_smb1_trans2_get_dfs_referral_request(analyzer::Analyzer* analyzer, Connection* c, Val* hdr, StringVal* file_name)
	{
	// Note that it is intentional that here we do not
	// check if ::smb1_trans2_get_dfs_referral_request is NULL, which should happen *before*
	// BifEvent::generate_smb1_trans2_get_dfs_referral_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(hdr);
	vl->append(file_name);

	mgr.QueueEvent(::smb1_trans2_get_dfs_referral_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
namespace BifType { namespace Record{ namespace SMB1 {  RecordType * Find_First2_Request_Args;  } } }
namespace BifType { namespace Record{ namespace SMB1 {  RecordType * Find_First2_Response_Args;  } } }
namespace BifType { namespace Record{ namespace SMB1 {  RecordType * Trans2_Args;  } } }
