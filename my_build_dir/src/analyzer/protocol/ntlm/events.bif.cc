// This file was automatically generated by bifcl from /home/ubuntu/bro/src/analyzer/protocol/ntlm/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr ntlm_negotiate; 
void BifEvent::generate_ntlm_negotiate(analyzer::Analyzer* analyzer, Connection* c, Val* negotiate)
	{
	// Note that it is intentional that here we do not
	// check if ::ntlm_negotiate is NULL, which should happen *before*
	// BifEvent::generate_ntlm_negotiate is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(negotiate);

	mgr.QueueEvent(::ntlm_negotiate, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr ntlm_challenge; 
void BifEvent::generate_ntlm_challenge(analyzer::Analyzer* analyzer, Connection* c, Val* challenge)
	{
	// Note that it is intentional that here we do not
	// check if ::ntlm_challenge is NULL, which should happen *before*
	// BifEvent::generate_ntlm_challenge is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(challenge);

	mgr.QueueEvent(::ntlm_challenge, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr ntlm_authenticate; 
void BifEvent::generate_ntlm_authenticate(analyzer::Analyzer* analyzer, Connection* c, Val* request)
	{
	// Note that it is intentional that here we do not
	// check if ::ntlm_authenticate is NULL, which should happen *before*
	// BifEvent::generate_ntlm_authenticate is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(request);

	mgr.QueueEvent(::ntlm_authenticate, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
