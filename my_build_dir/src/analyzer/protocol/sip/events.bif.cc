// This file was automatically generated by bifcl from /home/ubuntu/bro/src/analyzer/protocol/sip/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr sip_request; 
void BifEvent::generate_sip_request(analyzer::Analyzer* analyzer, Connection* c, StringVal* method, StringVal* original_URI, StringVal* version)
	{
	// Note that it is intentional that here we do not
	// check if ::sip_request is NULL, which should happen *before*
	// BifEvent::generate_sip_request is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(method);
	vl->append(original_URI);
	vl->append(version);

	mgr.QueueEvent(::sip_request, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr sip_reply; 
void BifEvent::generate_sip_reply(analyzer::Analyzer* analyzer, Connection* c, StringVal* version, bro_uint_t code, StringVal* reason)
	{
	// Note that it is intentional that here we do not
	// check if ::sip_reply is NULL, which should happen *before*
	// BifEvent::generate_sip_reply is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(version);
	vl->append(new Val(code, TYPE_COUNT));
	vl->append(reason);

	mgr.QueueEvent(::sip_reply, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr sip_header; 
void BifEvent::generate_sip_header(analyzer::Analyzer* analyzer, Connection* c, int is_orig, StringVal* name, StringVal* value)
	{
	// Note that it is intentional that here we do not
	// check if ::sip_header is NULL, which should happen *before*
	// BifEvent::generate_sip_header is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(name);
	vl->append(value);

	mgr.QueueEvent(::sip_header, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr sip_all_headers; 
void BifEvent::generate_sip_all_headers(analyzer::Analyzer* analyzer, Connection* c, int is_orig, Val* hlist)
	{
	// Note that it is intentional that here we do not
	// check if ::sip_all_headers is NULL, which should happen *before*
	// BifEvent::generate_sip_all_headers is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));
	vl->append(hlist);

	mgr.QueueEvent(::sip_all_headers, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr sip_begin_entity; 
void BifEvent::generate_sip_begin_entity(analyzer::Analyzer* analyzer, Connection* c, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::sip_begin_entity is NULL, which should happen *before*
	// BifEvent::generate_sip_begin_entity is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::sip_begin_entity, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr sip_end_entity; 
void BifEvent::generate_sip_end_entity(analyzer::Analyzer* analyzer, Connection* c, int is_orig)
	{
	// Note that it is intentional that here we do not
	// check if ::sip_end_entity is NULL, which should happen *before*
	// BifEvent::generate_sip_end_entity is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(is_orig, TYPE_BOOL));

	mgr.QueueEvent(::sip_end_entity, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
