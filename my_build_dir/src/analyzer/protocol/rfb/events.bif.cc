// This file was automatically generated by bifcl from /home/ubuntu/bro/src/analyzer/protocol/rfb/events.bif (plugin mode).


#include "events.bif.h"

EventHandlerPtr rfb_event; 
void BifEvent::generate_rfb_event(analyzer::Analyzer* analyzer, Connection* c)
	{
	// Note that it is intentional that here we do not
	// check if ::rfb_event is NULL, which should happen *before*
	// BifEvent::generate_rfb_event is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());

	mgr.QueueEvent(::rfb_event, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr rfb_authentication_type; 
void BifEvent::generate_rfb_authentication_type(analyzer::Analyzer* analyzer, Connection* c, bro_uint_t authtype)
	{
	// Note that it is intentional that here we do not
	// check if ::rfb_authentication_type is NULL, which should happen *before*
	// BifEvent::generate_rfb_authentication_type is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(authtype, TYPE_COUNT));

	mgr.QueueEvent(::rfb_authentication_type, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr rfb_auth_result; 
void BifEvent::generate_rfb_auth_result(analyzer::Analyzer* analyzer, Connection* c, int result)
	{
	// Note that it is intentional that here we do not
	// check if ::rfb_auth_result is NULL, which should happen *before*
	// BifEvent::generate_rfb_auth_result is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(result, TYPE_BOOL));

	mgr.QueueEvent(::rfb_auth_result, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr rfb_share_flag; 
void BifEvent::generate_rfb_share_flag(analyzer::Analyzer* analyzer, Connection* c, int flag)
	{
	// Note that it is intentional that here we do not
	// check if ::rfb_share_flag is NULL, which should happen *before*
	// BifEvent::generate_rfb_share_flag is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(new Val(flag, TYPE_BOOL));

	mgr.QueueEvent(::rfb_share_flag, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr rfb_client_version; 
void BifEvent::generate_rfb_client_version(analyzer::Analyzer* analyzer, Connection* c, StringVal* major_version, StringVal* minor_version)
	{
	// Note that it is intentional that here we do not
	// check if ::rfb_client_version is NULL, which should happen *before*
	// BifEvent::generate_rfb_client_version is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(major_version);
	vl->append(minor_version);

	mgr.QueueEvent(::rfb_client_version, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr rfb_server_version; 
void BifEvent::generate_rfb_server_version(analyzer::Analyzer* analyzer, Connection* c, StringVal* major_version, StringVal* minor_version)
	{
	// Note that it is intentional that here we do not
	// check if ::rfb_server_version is NULL, which should happen *before*
	// BifEvent::generate_rfb_server_version is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(major_version);
	vl->append(minor_version);

	mgr.QueueEvent(::rfb_server_version, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
EventHandlerPtr rfb_server_parameters; 
void BifEvent::generate_rfb_server_parameters(analyzer::Analyzer* analyzer, Connection* c, StringVal* name, bro_uint_t width, bro_uint_t height)
	{
	// Note that it is intentional that here we do not
	// check if ::rfb_server_parameters is NULL, which should happen *before*
	// BifEvent::generate_rfb_server_parameters is called to avoid unnecessary Val
	// allocation.

	val_list* vl = new val_list;

	vl->append(c->BuildConnVal());
	vl->append(name);
	vl->append(new Val(width, TYPE_COUNT));
	vl->append(new Val(height, TYPE_COUNT));

	mgr.QueueEvent(::rfb_server_parameters, vl, SOURCE_LOCAL, analyzer->GetID(), timer_mgr, c);
	} // event generation
